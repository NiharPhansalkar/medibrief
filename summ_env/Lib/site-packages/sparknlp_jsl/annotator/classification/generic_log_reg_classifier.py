from sparknlp_jsl.common import *
from sparknlp_jsl.annotator.generic_classifier.generic_classifier import GenericClassifierApproach
from sparknlp_jsl.annotator.generic_classifier.generic_classifier import GenericClassifierModel
from sparknlp_jsl.utils.licensed_annotator_type import InternalAnnotatorType

class GenericLogRegClassifierApproach(GenericClassifierApproach):
    """Trains a model to classify the input data into categories using a multinomial logistic regression.

    GenericLogRegClassifier is a derivative of GenericClassifier which implements a multinomial logistic regression. This
    is a single layer neural network with the logistic function at the output. The input to the model is FeatureVector
    and the output is category annotations with labels and corresponding confidence scores varying between 0 and 1.

    ====================== ======================
    Input Annotation types Output Annotation type
    ====================== ======================
    ``FEATURE_VECTIR``     ``CATEGORY``
    ====================== ======================
    """

    inputAnnotatorTypes = [InternalAnnotatorType.FEATURE_VECTOR]
    outputAnnotatorType = AnnotatorType.CATEGORY

    name = "GenericLogRegClassifierApproach"

    def __init__(self, classname="com.johnsnowlabs.nlp.annotators.classification.GenericLogRegClassifierApproach"):
        super(GenericLogRegClassifierApproach, self).__init__(classname=classname)

class GenericLogRegClassifierModel(GenericClassifierModel):
    """Classifies the input data into categories using a multinomial logistic regression.

    GenericLogRegClassifier is a derivative of GenericClassifier which implements a multinomial logistic regression. This
    is a single layer neural network with the logistic function at the output. The input to the model is FeatureVector
    and the output is category annotations with labels and corresponding confidence scores varying between 0 and 1.

    ====================== ======================
    Input Annotation types Output Annotation type
    ====================== ======================
    ``FEATURE_VECTIR``     ``CATEGORY``
    ====================== ======================
    """
    inputAnnotatorTypes = [InternalAnnotatorType.FEATURE_VECTOR]
    outputAnnotatorType = AnnotatorType.CATEGORY

    name = "GenericLogRegClassifierModel"

    def __init__(self, classname="com.johnsnowlabs.nlp.annotators.classification.GenericLogRegClassifierModel",
                 java_model=None):
        super(GenericLogRegClassifierModel, self).__init__(
            classname=classname,
            java_model=java_model
        )

    @staticmethod
    def pretrained(name="generic_logreg_classifier_ade", lang="en", remote_loc="clinical/models"):
        """Downloads and loads a pretrained model.

        Parameters
        ----------
        name : str, optional
            Name of the pretrained model, by default "generic_logreg_classifier_ade"
        lang : str, optional
            Language of the pretrained model, by default "en"
        remote_loc : str, optional
            Optional remote address of the resource, by default "clinical/models". Will use
            Spark NLPs repositories otherwise.

        Returns
        -------
        GenericLogRegClassifierModel
            The restored model
        """
        from sparknlp_jsl.pretrained import InternalResourceDownloader
        return InternalResourceDownloader.downloadModel(GenericLogRegClassifierModel, name, lang, remote_loc,
                                                        j_dwn='InternalsPythonResourceDownloader')