from sparknlp_jsl.common import *
from sparknlp_jsl.annotator.classification.generic_log_reg_classifier import GenericLogRegClassifierApproach
from sparknlp_jsl.annotator.classification.generic_log_reg_classifier import GenericLogRegClassifierModel

class FewShotClassifierApproach(GenericLogRegClassifierApproach):
    """
    FewShotClassifier is an implementation of SetFIT (Tunstall et al, 2022). The input to the model is sentence
    embeddings and the output is category annotations with labels and corresponding confidence scores varying
    between 0 and 1.

    =======================  ======================
    Input Annotation types   Output Annotation type
    =======================  ======================
    ``SENTENCE_EMBEDDINGS``  ``CATEGORY``
    =======================  ======================
    """

    inputAnnotatorTypes = [AnnotatorType.SENTENCE_EMBEDDINGS]
    outputAnnotatorType = AnnotatorType.CATEGORY

    name = "FewShotClassifierApproach"

    def __init__(self, classname="com.johnsnowlabs.nlp.annotators.classification.FewShotClassifierApproach"):
        super(FewShotClassifierApproach, self).__init__(classname=classname)

class FewShotClassifierModel(GenericLogRegClassifierModel):
    """
    FewShotClassifier is an implementation of SetFIT (Tunstall et al, 2022). The input to the model is sentence
    embeddings and the output is category annotations with labels and corresponding confidence scores varying
    between 0 and 1.

    ======================= ======================
    Input Annotation types  Output Annotation type
    ======================= ======================
    ``SENTENCE_EMBEDDINGS`` ``CATEGORY``
    ======================= ======================
    """
    inputAnnotatorTypes = [AnnotatorType.SENTENCE_EMBEDDINGS]
    outputAnnotatorType = AnnotatorType.CATEGORY

    name = "FewShotClassifierModel"

    def __init__(self, classname="com.johnsnowlabs.nlp.annotators.classification.FewShotClassifierModel",
                 java_model=None):
        super(FewShotClassifierModel, self).__init__(
            classname=classname,
            java_model=java_model
        )

    @staticmethod
    def pretrained(name, lang="en", remote_loc="clinical/models"):
        """Downloads and loads a pretrained model.

        Parameters
        ----------
        name : str, optional
            Name of the pretrained model
        lang : str, optional
            Language of the pretrained model, by default "en"
        remote_loc : str, optional
            Optional remote address of the resource, by default "clinical/models". Will use
            Spark NLPs repositories otherwise.

        Returns
        -------
        FewShotClassifierModel
            The restored model
        """
        from sparknlp_jsl.pretrained import InternalResourceDownloader
        return InternalResourceDownloader.downloadModel(FewShotClassifierModel, name, lang, remote_loc,
                                                        j_dwn='InternalsPythonResourceDownloader')