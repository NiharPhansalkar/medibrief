"""Contains Class for VectorDBPostProcessor"""
import json

from sparknlp_jsl.common import *
from sparknlp_jsl.utils.licensed_annotator_type import InternalAnnotatorType

class VectorDBPostProcessor(AnnotatorModelInternal):

    """VectorDBPostProcessor is used to filter and sort the annotations from the :class:`sparknlp_jsl.annotator.resolution.VectorDBModel`.

    ================================   ===============================
    Input Annotation types             Output Annotation type
    ================================   ===============================
    ``VECTOR_SIMILARITY_RANKINGS``     ``VECTOR_SIMILARITY_RANKINGS``
    ================================   ===============================

    Parameters
    ----------
    filterBy: str
        The filterBy parameter is used to select and prioritize filter options.
        Options: `metadata`, and `diversity_by_threshold`.
        Options can be given as a comma separated string like "metadata, diversity_by_threshold". The order of the options will be used to filter the annotations.
        - `metadata`: Filter by metadata fields. The `metadataCriteria` parameter should be set.
        - `diversity_by_threshold`: Filter by diversity threshold. Filter by the distance between the sorted annotations.
        When `diversity_by_threshold` option is set, `diversityThreshold` parameter should be used to set the threshold.
        Default: `metadata`
    sortBy: str
        The sortBy parameter is used to select sorting option.
        Options: `ascending`, `descending`, `lost_in_the_middle`, `diversity`.
        - `ascending`: Sort by ascending order of distance.
        - `descending`: Sort by descending order of distance.
        - `lost_in_the_middle`: Sort by lost in the middle ranker. Let's say we have 5 annotations with distances [1, 2, 3, 4, 5]. The lost in the middle ranker will sort them as [1, 3, 5, 4, 2].
        - `diversity`:  Sort by diversity ranker. The annotations are sorted by distance and the first annotation select, and then the next annotation is selected by the maximum average distance from the selected annotations.
        Default: `ascending`
    caseSensitive: bool
        Whether the criteria of the string operators are case sensitive or not.
        For example, if set to False, the operator "equals" will match "John" with "john".
        Default: False
    diversityThreshold: float
        The diversityThreshold parameter is used to set the threshold for the diversityByThreshold filter.
        The diversityByThreshold filter selects the annotations by the distance between the sorted annotations.
        diversityThreshold must be greater than 0.
        Default: 0.01
    maxTopKAfterFiltering: int
        The maxTopKAfterFiltering parameter is used to set the maximum number of annotations to return after filtering.
        If the number of annotations after filtering is greater than maxTopKAfterFiltering, the top maxTopKAfterFiltering annotations are selected.
        maxTopKAfterFiltering must be greater than 0.
        Default: 20
    allowZeroContentAfterFiltering: bool
        Whether to allow zero annotation after filtering.
        If set to True, the output may contain zero annotation if all annotations are filtered out.
        If set to False, The output is tried to contain at least one annotation.
        Default: False
    metadataCriteria: list[dict]
        The metadataCriteria parameter is used to filter the annotations by metadata fields.

    """

    name = "VectorDBPostProcessor"

    inputAnnotatorTypes = [InternalAnnotatorType.VECTOR_SIMILARITY_RANKINGS]
    outputAnnotatorType = InternalAnnotatorType.VECTOR_SIMILARITY_RANKINGS

    filterBy = Param(Params._dummy(),
                     "filterBy",
                     "The filterBy parameter is used to select and prioritize filter options.",
                     typeConverter=TypeConverters.toString)

    sortBy = Param(Params._dummy(),
                   "sortBy",
                   "The sortBy parameter is used to select sorting option.",
                   typeConverter=TypeConverters.toString)

    caseSensitive = Param(Params._dummy(),
                          "caseSensitive",
                          "Whether the criteria of the string operators are case sensitive or not.",
                          typeConverter=TypeConverters.toBoolean)

    diversityThreshold = Param(Params._dummy(),
                               "diversityThreshold",
                               "The diversityThreshold parameter is used to set the threshold for the diversityByThreshold filter.",
                               typeConverter=TypeConverters.toFloat)

    maxTopKAfterFiltering = Param(Params._dummy(),
                                  "maxTopKAfterFiltering",
                                  "The maxTopKAfterFiltering parameter is used to set the maximum number of annotations to return after filtering.",
                                  typeConverter=TypeConverters.toInt)

    allowZeroContentAfterFiltering = Param(Params._dummy(),
                                           "allowZeroContentAfterFiltering",
                                           "Whether to allow zero annotation after filtering.",
                                           typeConverter=TypeConverters.toBoolean)

    def __init__(self, classname="com.johnsnowlabs.nlp.annotators.rag.VectorDBPostProcessor", java_model=None):
        super(VectorDBPostProcessor, self).__init__(
            classname=classname,
            java_model=java_model
        )

    def setFilterBy(self, value: str):
        """Sets the filterBy parameter is used to select and prioritize filter options.

        Options: `metadata`, and `diversity_by_threshold`.
        Options can be given as a comma separated string like "metadata, diversity_by_threshold". The order of the options will be used to filter the annotations.

        - `metadata`: Filter by metadata fields. The `metadataCriteria` parameter should be set.
        - `diversity_by_threshold`: Filter by diversity threshold. Filter by the distance between the sorted annotations.
        When `diversity_by_threshold` option is set, `diversityThreshold` parameter should be used to set the threshold.

        Default: `metadata`

        Parameters
        ----------
        value : str
            The filterBy parameter is used to select and prioritize filter options. Default: `metadata`
        """
        return self._set(filterBy=value)

    def setSortBy(self, value: str):
        """Sets the sortBy parameter is used to select sorting option.
        Options: `ascending`, `descending`, `lost_in_the_middle`, `diversity`.
        
        - `ascending`: Sort by ascending order of distance.
        - `descending`: Sort by descending order of distance.
        - `lost_in_the_middle`: Sort by lost in the middle ranker. Let's say we have 5 annotations with distances [1, 2, 3, 4, 5]. The lost in the middle ranker will sort them as [1, 3, 5, 4, 2].
        - `diversity`:  Sort by diversity ranker. The annotations are sorted by distance and the first annotation select, and then the next annotation is selected by the maximum average distance from the selected annotations.

        Default: `ascending`

        Parameters
        ----------
        value : str
            The sortBy parameter is used to select sorting option. Default: `ascending`
        """
        return self._set(sortBy=value)

    def setCaseSensitive(self, value: bool):
        """Sets whether the criteria of the string operators are case sensitive or not.

        For example, if set to False, the operator "equals" will match "John" with "john".

        Default: False

        Parameters
        ----------
        value : bool
            Whether the criteria of the string operators are case sensitive or not. Default: True.
        """
        return self._set(caseSensitive=value)

    def setDiversityThreshold(self, value: float):
        """Sets the diversityThreshold parameter is used to set the threshold for the diversityByThreshold filter.
        The diversityByThreshold filter selects the annotations by the distance between the sorted annotations.
        diversityThreshold must be greater than 0.
        Default: 0.01

        Parameters
        ----------
        value : float
            The diversityThreshold parameter is used to set the threshold for the diversityByThreshold filter.
        """
        if value <= 0.0:
            raise ValueError("diversityThreshold must be greater than 0.")
        return self._set(diversityThreshold=value)

    def setMaxTopKAfterFiltering(self, value: int):
        """Sets the maxTopKAfterFiltering parameter which is used to set the maximum number of annotations to return after filtering.
        If the number of annotations after filtering is greater than maxTopKAfterFiltering, the top maxTopKAfterFiltering annotations are selected.
        maxTopKAfterFiltering must be greater than 0.

        Default: 20

        Parameters
        ----------
        value : int
            The maxTopKAfterFiltering parameter is used to set the maximum number of annotations to return after filtering.
        """
        if value <= 0:
            raise ValueError("maxTopKAfterFiltering must be greater than 0.")
        return self._set(maxTopKAfterFiltering=value)

    def setAllowZeroContentAfterFiltering(self, value: bool):
        """Sets whether to allow zero annotation after filtering.
        If set to True, the output may contain zero annotation if all annotations are filtered out.
        If set to False, The output is tried to contain at least one annotation.

        Default: False

        Parameters
        ----------
        value : bool
            Whether to allow zero annotation after filtering.
        """
        return self._set(allowZeroContentAfterFiltering=value)

    def setMetadataCriteria(self, value: list):
        """Sets the metadataCriteria parameter is used to filter the annotations by metadata fields. 
        The metadataCriteria param is a list of dictionaries.
        A dictionary should contain the following keys:
        
        - `field`: The field of the metadata to filter.
        - `fieldType`: The type of the field to filter. Options: string, int, float, date.
        - `operator`: The operator to apply to the filter. Options: equals, not_equals, greater_than, greater_than_or_equals, less_than, less_than_or_equals, contains, not_contains, regex.
        - `value`: The value to filter.
        - `matchMode`: The match mode to apply to the filter. Options: any, all, none.
        - `matchValues`: The values to filter.
        - `dateFormats`: The date formats to parse the date metadata field.
        - `converterFallback`: The converter fallback when hitting cast exception. Options: filter, not_filter, error. 
        
        Notes:
        ------
        - `field`, `fieldType`, and `operator` are required. Other keys are optional.
        - `fieldType` is set to `string`, supported operators are: equals, not_equals, contains, not_contains, regex.
        - `fieldType` is set to `int` or `float` or `date`, supported operators are: equals, not_equals, greater_than, greater_than_or_equals, less_than, less_than_or_equals.
        - If `matchMode` and `matchValues` are not set, `value` must be set.
        - If `value` is set, `matchMode` and `matchValues` are ignored.
        - If `fieldType` is set to `date`, `dateFormats` must be set.
        - `matchMode` and `matchValues` must be set together.
        - If `converterFallback` is set to `error`, the filter will throw an error when hitting cast exception. Default 'error'.

        Example:
        --------
        >>> VectorDBPostProcessor() \\
        ...     .setFilterBy('metadata') \\
        ...     .setMetadataCriteria([ \\
        ...         {"field": "publish_date", "fieldType": "date", "operator": "greater_than", "value": "2022 May 11", "dateFormats": ["yyyy MMM dd", "yyyy MMM d"], "converterFallback": "filter"}, \\
        ...         {"field": "distance", "fieldType": "float", "operator": "less_than", "value": "0.5470"}, \\
        ...         {"field": "title", "fieldType": "string", "operator": "contains", "matchMode": "any", "matchValues": ["diabetes", "immune system"]}] \\
         
        Parameters
        ----------
        value : list[dict]
            The metadataCriteria parameter is used to filter the annotations by metadata fields.
        """
        return self.setMetadataCriteriaAsStr(json.dumps(value))

    def setMetadataCriteriaAsStr(self, value: str):
        """Sets the metadataCriteria parameter is used to filter the annotations by metadata fields.
        The metadataCriteria param is a list of dictionaries.
        A dictionary should contain the following keys:
        
        - `field`: The field of the metadata to filter.
        - `fieldType`: The type of the field to filter. Options: string, int, float, date.
        - `operator`: The operator to apply to the filter. Options: equals, not_equals, greater_than, greater_than_or_equals, less_than, less_than_or_equals, contains, not_contains, regex.
        - `value`: The value to filter.
        - `matchMode`: The match mode to apply to the filter. Options: any, all, none.
        - `matchValues`: The values to filter.
        - `dateFormats`: The date formats to parse the date metadata field.
        - `converterFallback`: The converter fallback when hitting cast exception. Options: filter, not_filter, error. 
        
        Notes:
        ------
        - `field`, `fieldType`, and `operator` are required. Other keys are optional.
        - `fieldType` is set to `string`, supported operators are: equals, not_equals, contains, not_contains, regex.
        - `fieldType` is set to `int` or `float` or `date`, supported operators are: equals, not_equals, greater_than, greater_than_or_equals, less_than, less_than_or_equals.
        - If `matchMode` and `matchValues` are not set, `value` must be set.
        - If `value` is set, `matchMode` and `matchValues` are ignored.
        - If `fieldType` is set to `date`, `dateFormats` must be set.
        - `matchMode` and `matchValues` must be set together.
        - If `converterFallback` is set to `error`, the filter will throw an error when hitting cast exception. Default 'error'.
         
        Parameters
        ----------
        value : str
            The metadataCriteria parameter is used to filter the annotations by metadata fields.
        """
        self._call_java("setMetadataCriteriaAsStr", value)
        return self


