from sparknlp_jsl.common import *
from sparknlp_jsl.utils.licensed_annotator_type import InternalAnnotatorType


class ExtractiveSummarization(AnnotatorModelInternal):
    """
    Extractive summarizaiton based on LexRank
    """
    inputAnnotatorTypes = [AnnotatorType.SENTENCE_EMBEDDINGS, AnnotatorType.DOCUMENT]
    outputAnnotatorType = AnnotatorType.DOCUMENT

    name = "BertSentenceChunkEmbeddings"

    similarityThreshold = Param(Params._dummy(),
                        "similarityThreshold",
                        "Minimal cosine similarity between sentences to consider them similar. Default is 0 which"
                        "means no threhsold is used (i.e. a continuous vversion of LexRank is applied)",
                        typeConverter=TypeConverters.toFloat)

    summarySize = Param(Params._dummy(),
                                "summarySize",
                                "Number of sentences to summarize the text. Default is 1.",
                                typeConverter=TypeConverters.toInt)

    returnSingleDocument = Param(Params._dummy(),
                                 "returnSingleDocument",
                                 "Compile the selected sentences into a single document.",
                                 typeConverter=TypeConverters.toBoolean)

    def setSimilarityThreshold(self, value):
        """Sets the minimal cosine similarity between sentences to consider them similar.

        Parameters
        ----------
        value : float
           minimal cosine similarity between sentences
        """
        return self._set(similarityThreshold=value)

    def setSummarySize(self, value):
        """Sets the number of sentences to summarize the text

        Parameters
        ----------
        value : int
           the number of sentences to summarize the text
        """
        return self._set(summarySize=value)

    def setReturnSingleDocument(self, value):
        """Determines whether to compile the selected sentences into a single document

        Parameters
        ----------
        value : bool
           whether to compile the selected sentences into a single document
        """
        return self._set(returnSingleDocument=value)

    def __init__(self, classname="com.johnsnowlabs.nlp.annotators.embeddings.ExtractiveSummarization", java_model=None):
        super(ExtractiveSummarization, self).__init__(
            classname=classname,
            java_model=java_model
        )
        self._setDefault(
            similarityThreshold=0,
            summarySize=1,
            returnSingleDocument=True
        )