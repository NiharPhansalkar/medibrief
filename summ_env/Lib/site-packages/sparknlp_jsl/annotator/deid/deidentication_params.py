from sparknlp_jsl.common import *
import warnings


class DeIdentificationParams:
    """It is a base class that contains all the params that are common between DeIdentificationModel
    and DeIdentification annotators.

    Parameters
    ----------
    mode
        Mode for Anonimizer ['mask'|'obfuscate']
    obfuscateDate
        When mode=='obfuscate' whether to obfuscate dates or not. This param helps in consistency to make dateFormats more visible.
        When setting to ``true``, make sure dateFormats param fits the needs (default: false)
        If the value is true and obfuscation is failed, then unnormalizedDateMode param will be activated.
        When setting to 'false', then the date will be masked to <DATE>
        Default: false
    dateTag
        Tag representing dates in the obfuscate reference file (default: DATE)
    days
        A number of days to obfuscate the dates by displacement. If not provided a random integer between 1 and 60 will be used.
    dateToYear
        True if we want the model to transform dates into years, False otherwise.
    minYear
        Minimum year to be used when transforming dates into years. Default: '1929'
    dateFormats
        List of date formats to automatically displace if parsed
    consistentObfuscation
        Whether to replace very similar entities in a document with the same randomized term (default: true)
        The similarity is based on the Levenshtein Distance between the words.
    sameEntityThreshold
        Similarity threshold [0.0-1.0] to consider two appearances of an entity as ``the same`` (default: 0.9).
    obfuscateRefSource
        The source of obfuscation of to obfuscate the entities. For dates entities, This property is invalid.
        The values ar the following:
        file: Takes the entities from the obfuscatorRefFile
        faker: Takes the entities from the Faker module
        both : Takes the entities from the obfuscatorRefFile and the faker module randomly.
    regexOverride
        If is true prioritize the regex entities, if is false prioritize the ner.
    language
        The language used to select the regex file and some faker entities.
        The values are the following:
        'en'(English), 'de'(German), 'es'(Spanish), 'fr'(French), 'ar'(Arabic) or 'ro'(Romanian). Default:'en'.
    seed
        It is the seed to select the entities on obfuscate mode. With the seed,
        you can reply to an execution several times with the same output.
    ignoreRegex
        Select if you want to use the regex file loaded in the model. If true the default regex file will be not used.
        The default value is false.
    isRandomDateDisplacement
        Use a random displacement days in dates entities, that random number is based on the `seed` parameter.
        If true use random displacement days in dates entities, if false use the `days` parameter.
        The default value is false.
    mappingsColumn
        This is the mapping column that will return the Annotations chunks with the fake entities.
    returnEntityMappings
        With this property, you can select if you want to return mapping column
    blackList
        List of entities that will be ignored in the regex rules. The rest will be processed.
        The default values are "IBAN","ZIP","NPI","DLN","PASSPORT","C_CARD","DEA","SSN", "IP", "DEA".
    blackListEntities
        List of entities coming from NER or regex rules that will be ignored for masking or obfuscation.
        The rest entities will be processed.
        Default: []
    maskingPolicy
        Select the masking policy

        - same_length_chars: Replace the obfuscated entity with a masking sequence composed of asterisks and surrounding squared brackets,being the total length of the masking sequence of the same length as the original sequence. Example, Smith -> [***]. If the entity is less than 3 chars (like Jo, or 5), asterisks without brackets will be returned.
        - entity_labels: Replace the values with the corresponding entity labels.
        - fixed_length_chars: Replace the obfuscated entity with a masking sequence composed of a fixed number of asterisk.
    sameLengthFormattedEntities
        List of formatted entities to generate the same length outputs as original ones during obfuscation.
        The supported and default formatted entities are: PHONE, FAX, ID, IDNUM, BIOID, MEDICALRECORD, ZIP, VIN, SSN, DLN, LICENSE, PLATE, CONTACT, ACCOUNT.
    genderAwareness
        Whether to use gender-aware names or not during obfuscation. This param effects only names.
        If the value is true, it might decrease performance. Default: False
    ageRangesByHipaa
        Whether to obfuscate ages based on HIPAA (Health Insurance Portability and Accountability Act) Privacy Rule.
        The HIPAA Privacy Rule mandates that ages from patients older than 90 years must be obfuscated,
        while age for patients 90 years or younger can remain unchanged.
        If True, age entities larger than 90 will be obfuscated as per HIPAA Privacy Rule, the others will remain unchanged.
        If False, `ageRanges` parameter is valid. Default: False.
    obfuscationStrategyOnException
        Sets the obfuscation strategy to be applied when an exception occurs.
        Four possible values are supported:
        - "mask": The original chunk is replaced with a masking pattern.
        - "default": The original chunk is replaced with a default faker.
        - "skip": The original chunk is not replaced with any faker.
        - "exception": Throws the exception.
        The default obfuscation strategy is "default".
    metadataMaskingPolicy
        If specified, the metadata includes the masked form of the document.
        Select the following masking policy if you want to return the masked form in the metadata:
        - 'entity_labels': Replace the values with the entity value.
        - 'same_length_chars': Replace the name with the asterix with same length minus two plus brackets on both end.If the entity is less than 3 chars (like Jo, or 5), we can just use asterix without brackets.
        - 'fixed_length_chars': Replace the obfuscated entity with a masking sequence composed of a fixed number of asterisk.
        - Default: ""
    obfuscateByAgeGroups
        Whether to obfuscate ages based on age groups.
        When `True`, the age groups specified in the ``ageGroups`` parameter will be used to obfuscate ages.
        When `False`, the age ranges specified in the ``ageRanges`` parameter will be used to obfuscate ages.
        Default: False
    ageGroups: dict[str, List[int]]
        A dictionary of age groups to obfuscate ages.
        For this parameter to be active, the ``obfuscateByAgeGroups`` parameter must be true.
        If the given ``ageGroups`` do not fully contain the ages, the ages continue to be obfuscated according to the ``ageRanges`` parameter.
        The dictionary should contain the age group name as the key and an list of two integers as the value.
        The first integer is the lower bound of the age group, and the second integer is the upper bound of the age group.
        Default age groups are as follows in the English language:
        >>> { "baby": [0, 1],
        ...   "toddler": [1, 4],
        ...   "child": [4, 13],
        ...   "teenager": [13, 20],
        ...   "adult": [20, 65],
        ...   "senior": [65, 100] }
    keepYear: bool
        Whether to keep the year intact when obfuscating date entities.
        If True, the year will remain unchanged during the obfuscation process.
        If False, the year will be modified along with the month and day.
        Default: False.

    """

    mode = Param(Params._dummy(), "mode",
                 "Mode for Anonimizer ['mask'|'obfuscate']",
                 TypeConverters.toString)
    maskingPolicy = Param(Params._dummy(), "maskingPolicy",
                          "Select the masking policy:'same_length_chars' or 'entity_labels'.",
                          TypeConverters.toString)
    fixedMaskLength = Param(Params._dummy(), "fixedMaskLength",
                            "This is the length of the masking sequence that will be used when the 'fixed_length_chars' masking policy is selected.",
                            TypeConverters.toInt)
    obfuscateDate = Param(Params._dummy(), "obfuscateDate",
                          "When mode=='obfuscate' whether to obfuscate dates or not. This param helps in consistency to make dateFormats more visible. When setting to ``true``, make sure dateFormats param fits the needs (default: false)",
                          typeConverter=TypeConverters.toBoolean)
    zipCodeTag = Param(Params._dummy(), "zipCodeTag",
                       "Tag representing zip codes in the obfuscate reference file (default: ZIP)",
                       TypeConverters.toString)
    days = Param(Params._dummy(), "days",
                 "Number of days to obfuscate by displacement the dates.",
                 TypeConverters.toInt)
    dateToYear = Param(Params._dummy(), "dateToYear",
                       "True if we want the model to transform dates into years, False otherwise.",
                       TypeConverters.toBoolean)
    minYear = Param(Params._dummy(), "minYear",
                    "Minimum year to be used when transforming dates into years.",
                    TypeConverters.toInt)
    consistentObfuscation = Param(Params._dummy(), "consistentObfuscation",
                                  "Whether to replace very similar entities in a document with the same randomized term (default: true).",
                                  TypeConverters.toBoolean)
    sameEntityThreshold = Param(Params._dummy(), "sameEntityThreshold",
                                "Similarity threshold [0.0-1.0] to consider two appearances of an entity as ``the same`` (default: 0.9).",
                                TypeConverters.toFloat)
    obfuscateRefSource = Param(Params._dummy(), "obfuscateRefSource",
                               "Mode for select obfuscate source ['both'|'faker'| 'file]",
                               TypeConverters.toString)
    regexOverride = Param(Params._dummy(), "regexOverride",
                          "Prioritice regex over ner entities",
                          TypeConverters.toBoolean)
    seed = Param(Params._dummy(), "seed",
                 "It is the seed to select the entities on obfuscate mode",
                 TypeConverters.toInt)
    ignoreRegex = Param(Params._dummy(), "ignoreRegex",
                        "Select if you want to use regex",
                        TypeConverters.toBoolean)
    isRandomDateDisplacement = Param(Params._dummy(), "isRandomDateDisplacement",
                                     "Select if you want to use random displacement in dates",
                                     TypeConverters.toBoolean)
    mappingsColumn = Param(Params._dummy(), "mappingsColumn",
                           "This is the mapping column that will return the Annotations chunks with the fake entities",
                           TypeConverters.toString)
    returnEntityMappings = Param(Params._dummy(), "returnEntityMappings",
                                 "With this property you select if you want to return mapping column",
                                 TypeConverters.toBoolean)
    blackList = Param(Params._dummy(), "blackList",
                      "List of entities that will be ignored in the regex file. The rest will be processed.",
                      TypeConverters.toListString)
    blackListEntities = Param(Params._dummy(), "blackListEntities",
                              "List of entities coming from NER or regex rules that will be ignored for masking or obfuscation. The rest entities will be processed. Default: []",
                              TypeConverters.toListString)
    language = Param(Params._dummy(), "language",
                     "The language used to select the regex file and some faker entities",
                     TypeConverters.toString)
    useShifDays = Param(Params._dummy(), "useShifDays",
                        "Select if you want to use the reandmo shift per record",
                        TypeConverters.toBoolean)
    region = Param(Params._dummy(), "region",
                   "The country format eu or usa",
                   TypeConverters.toString)
    unnormalizedDateMode = Param(Params._dummy(), "unnormalizedDateMode",
                                 "Sets the mode to use if the date is not formatted",
                                 TypeConverters.toString)
    ageRanges = Param(Params._dummy(), "ageRanges",
                      "List of integers specifying limits of the age groups to preserve during obfuscation",
                      TypeConverters.toListInt)
    outputAsDocument = Param(Params._dummy(),
                             "outputAsDocument",
                             "Whether to return all sentences joined into a single document",
                             TypeConverters.toBoolean)
    sameLengthFormattedEntities = Param(Params._dummy(), "sameLengthFormattedEntities",
                                        "List of formatted entities to generate the same length outputs as original ones during obfuscation",
                                        TypeConverters.toListString)
    dateFormats = Param(Params._dummy(), "dateFormats",
                        "List of date formats to automatically displace if parsed",
                        typeConverter=TypeConverters.toListString)
    dateTag = Param(Params._dummy(), "dateTag",
                    "Tag representing dates in the obfuscate reference file (default: DATE)",
                    TypeConverters.toString)
    genderAwareness = Param(Params._dummy(),
                            "genderAwareness",
                            "Whether to use gender-aware names or not during obfuscation.",
                            TypeConverters.toBoolean)
    ageRangesByHipaa = Param(Params._dummy(),
                             "ageRangesByHipaa",
                             "Enable HIPAA age rules when obfuscating ages.",
                             TypeConverters.toBoolean)
    obfuscationStrategyOnException = Param(Params._dummy(), "obfuscationStrategyOnException",
                                 "The obfuscation strategy determines how obfuscation is handled in case of an exception.",
                                 TypeConverters.toString)
    metadataMaskingPolicy = Param(Params._dummy(), "metadataMaskingPolicy",
                                  "If specified, the metadata includes the masked form of the document.",
                                  TypeConverters.toString)
    obfuscateByAgeGroups = Param(Params._dummy(), "obfuscateByAgeGroups",
                                 "Whether to obfuscate ages based on age groups.",
                                 TypeConverters.toBoolean)
    keepYear = Param(Params._dummy(), "keepYear",
                     "Whether to keep the year intact when obfuscating date entities.",
                     TypeConverters.toBoolean)

    def setLanguage(self, lang: str):
        """The language used to select the regex file and some faker entities.
        The values are the following:
        'en'(English), 'de'(German), 'es'(Spanish), 'fr'(French), 'ar'(Arabic) or 'ro'(Romanian).
        Default:'en'

        Parameters
        ----------
        lang : str
          The language used to select the regex file and some faker entities.'en'(English), 'de'(German), 'es'(Spanish), 'fr'(French), 'ar'(Arabic) or 'ro'(Romanian). Default:'en'.
        """
        return self._set(language=lang)

    def getBlackList(self):
        """Gets the value of blackList or its default value.
        """
        self.getOrDefault(self.blackList)

    def setMode(self, mode: str):
        """Sets mode for Anonymizer ['mask'|'obfuscate']

        Parameters
        ----------
        mode : str
            Mode for Anonymizer ['mask'|'obfuscate']
        """
        return self._set(mode=mode)

    def setMaskingPolicy(self, mask: str):
        """Sets the masking policy

        - same_length_chars: Replace the obfuscated entity with a masking sequence composed of asterisks and surrounding squared brackets, being the total length of the masking sequence of the same length as the original sequence. Example, Smith -> [***]. If the entity is less than 3 chars (like Jo, or 5), asterisks without brackets will be returned.
        - entity_labels: Replace the values with the corresponding entity labels.
        - fixed_length_chars: Replace the obfuscated entity with a masking sequence composed of a fixed number of asterisks.

        Parameters
        ----------
        mask : str
            The masking policy
        """
        return self._set(maskingPolicy=mask)

    def setFixedMaskLength(self, length):
        """Fixed mask length: this is the length of the masking sequence that will be used when the 'fixed_length_chars'
        masking policy is selected.

        Parameters
        ----------
        length : int
           The mask length
        """
        return self._set(fixedMaskLength=length)
    def setDateTag(self, tag: str):
        """Set Tag representing what are the NER entity (default: DATE)

        Parameters
        ----------
        tag : str
            Tag representing what are the NER entity (default: DATE)
        """
        return self._set(dateTag=tag)

    def setZipCodeTag(self, tag: str):
        """Tag representing zip codes in the obfuscate reference file (default: ZIP)

        Parameters
        ----------
        tag : str
            Tag representing zip codes  in the obfuscate reference file (default: ZIP)
        """
        return self._set(zipCodeTag=tag)

    def setObfuscateDate(self, value):
        """When mode=='obfuscate' whether to obfuscate dates or not. This param helps in consistency to make dateFormats more visible.
        When setting to ``true``, make sure dateFormats param fits the needs.
        If the value is ``true`` and obfuscation is failed, then unnormalizedDateMode param will be activated.
        When setting to ``false``, then the date will be masked to <DATE>
        Default: false

        Parameters
        ----------
        value : str
            When mode=='obfuscate' whether to obfuscate dates or not. Default: false
        """
        return self._set(obfuscateDate=value)

    def setDays(self, d):
        """Sets number of days to obfuscate by displacement the dates.

        Parameters
        ----------
        d : int
            Number of days to obfuscate by displacement the dates.
        """
        return self._set(days=d)

    def setDateToYear(self, s):
        """Sets transform dates into years.

        Parameters
        ----------
        s : bool
            True if we want the model to transform dates into years, False otherwise.
        """
        return self._set(dateToYear=s)

    def setMinYear(self, s):
        """Sets minimum year to be used when transforming dates into years. Default: '1929'

        Parameters
        ----------
        s : int
            Minimum year to be used when transforming dates into years. Default: '1929'
        """
        return self._set(minYear=s)

    def setDateFormats(self, s):
        """Sets list of date formats to automatically displace if parsed

        Parameters
        ----------
        s : str
            List of date formats to automatically displace if parsed
        """
        return self._set(dateFormats=s)

    def setConsistentObfuscation(self, s):
        """Sets whether to replace very similar entities in a document with the same randomized term (default: true).
        The similarity is based on the Levenshtein Distance between the words.

        Parameters
        ----------
        s : str
            Whether to replace very similar entities in a document with the same randomized term.
            The similarity is based on the Levenshtein Distance between the words.
        """
        return self._set(consistentObfuscation=s)

    def setSameEntityThreshold(self, s):
        """Sets similarity threshold [0.0-1.0] to consider two appearances of an entity as `the same` (default: 0.9).

        Parameters
        ----------
        s : float
            Similarity threshold [0.0-1.0] to consider two appearances of an entity as `the same` (default: 0.9).
        """
        return self._set(sameEntityThreshold=s)

    def setObfuscateRefSource(self, s):
        """Sets mode for select obfuscate source ['both'|'faker'| 'file]

        Parameters
        ----------
        s : str
            Mode for select obfuscate source ['both'|'faker'| 'file]
        """
        return self._set(obfuscateRefSource=s)

    def setRegexOverride(self, s):
        """Sets whether to prioritize regex over ner entities.
        If the value is true, prioritize the regex entities; if the value is false, prioritize the ner.
        The default value is false.

        Parameters
        ----------
        s : bool
            Whether to prioritize regex over ner entities
        """
        return self._set(regexOverride=s)

    def setIgnoreRegex(self, s):
        """Sets whether you want to use regex or not. If the value is 'True',
        it can increase performance but might decrease accuracy. Default: False.

        Parameters
        ----------
        s : bool
            Whether to use regex or not. If the value is 'True',
        it can increase performance but might decrease accuracy. Default: False.
        """
        return self._set(ignoreRegex=s)

    def setSeed(self, s):
        """Sets the seed to select the entities on obfuscate mode. With the seed,
        you can reply to an execution several times with the same output.

        Parameters
        ----------
        s : int
            The seed to select the entities on obfuscate mode.
        """
        return self._set(seed=s)

    def setIsRandomDateDisplacement(self, s):
        """Sets if you want to use random displacement in dates

        Parameters
        ----------
        s : bool
            Boolean value to select if you want to use random displacement in dates
        """
        return self._set(isRandomDateDisplacement=s)

    def setMappingsColumn(self, s):
        """Sets the name of mapping column that will return the Annotations chunks with the fake entities

        Parameters
        ----------
        s : str
            Mapping column that will return the Annotations chunks with the fake entities
        """
        return self._set(mappingsColumn=s)

    def setReturnEntityMappings(self, s):
        """Sets if you want to return mapping column

        Parameters
        ----------
        s : bool
            Whether to return the mapping column.
        """
        return self._set(returnEntityMappings=s)

    def setBlackList(self, s):
        """Sets a list of entities that will be ignored in the regex file. The rest will be processed.
        The default values are "IBAN","ZIP","NPI","DLN","PASSPORT","C_CARD","DEA","SSN", "IP", "DEA".
        Parameters
        ----------
        s : list
            List of entities that will be ignored in the regex file. The rest will be processed.
        The default values are "IBAN","ZIP","NPI","DLN","PASSPORT","C_CARD","DEA","SSN", "IP", "DEA".
        """
        return self._set(blackList=s)

    def setBlackListEntities(self, value):
        """Sets a list of entities coming from NER or regex rules that will be ignored for masking or obfuscation.
        The rest entities will be processed. Default: []

        Parameters
        ----------
        value : list
            List of entities coming from NER or regex rules that will be ignored for masking or obfuscation.
        """
        return self._set(blackListEntities=value)

    def setUseShifDays(self, s):
        warnings.warn("setUseShifDays is deprecated because of typo , use setUseShiftDays instead", DeprecationWarning)
        return self.setUseShiftDays(s)

    def setUseShiftDays(self, s):
        """Sets if you want to use the random shift day when the document has this in its metadata. Default: False

        Parameters
        ----------
        s : bool
            Whether to use the random shift day when the document has this in its metadata. Default: False
        """
        return self._set(useShifDays=s)

    def getUseShiftDays(self):
        """Return the useShiftDays value.
        """
        return self.getOrDefault(self.useShifDays)

    def setRegion(self, s):
         """ With this property, you can select particular dateFormats. This property is especially used when obfuscating dates.
         For example:
         Decide whether the first part of 11/11/2023 is a day or the second part is a day when obfuscating dates.
         The values are following:
         'eu' for European Union
         'us' for the USA
         Default: 'eu'

         Parameters
         ----------
         s : str
             The region to use select date formats. Options: 'eu' for European Union, 'us' for the USA, Default: 'eu'
         """
         return self._set(region=s)

    def setUnnormalizedDateMode(self, s):
        """Sets the mode to use if the date is not formatted.

        Parameters
        ----------
        s : str
            The mode to use if the date is not formatted. [mask, obfuscate, skip] Default: obfuscate
        """
        return self._set(unnormalizedDateMode=s)

    def setAgeRanges(self, s):
        """Sets list of integers specifying limits of the age groups to preserve during obfuscation

        Parameters
        ----------
        s : List[str]

        """
        return self._set(ageRanges=s)

    def setOutputAsDocument(self, l):
        """Set whether to return all sentences joined into a single document

        Parameters
        ----------
        l : str
          Whether to return all sentences joined into a single document
        """
        return self._set(outputAsDocument=l)

    def setSameLengthFormattedEntities(self, s):
        """Sets list of formatted entities to generate the same length outputs as original ones during obfuscation

        Parameters
        ----------
        s : List[str]
        The supported and default formatted entities are: PHONE, FAX, ID, IDNUM, BIOID, MEDICALRECORD, ZIP, VIN, SSN, DLN, LICENSE, PLATE, CONTACT, ACCOUNT.
        """
        return self._set(sameLengthFormattedEntities=s)

    def getSameLengthFormattedEntities(self):
        """Returns the sameLengthFormattedEntities value.
        """
        return self.getOrDefault(self.sameLengthFormattedEntities)

    def setGenderAwareness(self, l):
        """Set whether to use gender-aware names or not during obfuscation.
        This param effects only names.
        If value is true, it might decrease performance.
        Default: False

        Parameters
        ----------
        l : str
          Whether to use gender-aware names or not during obfuscation. This param effects only names.
          If value is true, it might decrease performance. Default: False
        """
        return self._set(genderAwareness=l)

    def setAgeRangesByHipaa(self, value: bool):
        """
        Sets whether to obfuscate ages based on HIPAA (Health Insurance Portability and Accountability Act) Privacy Rule.

        The HIPAA Privacy Rule mandates that ages from patients older than 90 years must be obfuscated,
        while age for patients 90 years or younger can remain unchanged.

        Parameters
        ----------
        value : bool
            If True, age entities larger than 90 will be obfuscated as per HIPAA Privacy Rule, the others will remain unchanged.
            If False, `ageRanges` parameter is valid. Default: False.
        """
        return self._set(ageRangesByHipaa=value)

    def setObfuscationStrategyOnException(self, value: str):
        """Sets the obfuscation strategy to be applied when an exception occurs.
        Four possible values are supported:

        - "mask": The original chunk is replaced with a masking pattern.
        - "default": The original chunk is replaced with a default faker.
        - "skip": The original chunk is not replaced with any faker.
        - "exception": Throws the exception.

        The default obfuscation strategy is "default".

        Parameters
        ----------
        value : str
            The obfuscation strategy to set. Should be one of ["mask", "skip", "default", "exception"].
        """
        return self._set(obfuscationStrategyOnException=value)

    def setMetadataMaskingPolicy(self, value: str):
        """Sets metadata masking policy.
        If specified, the metadata includes the masked form of the document.
        Select the following masking policy if you want to return mask form in the metadata:

        - 'entity_labels': Replace the values with the entity value.
        - 'same_length_chars': Replace the name with the asterix with same length minus two plus brackets on both end.If the entity is less than 3 chars (like Jo, or 5), we can just use asterix without brackets.
        - 'fixed_length_chars': Replace the obfuscated entity with a masking sequence composed of a fixed number of asterisk.
        - Default: ""

        Parameters
        -----------
        value : str
            If specified, the metadata includes the masked form of the document.
        """
        return self._set(metadataMaskingPolicy=value)
    
    def setObfuscateByAgeGroups(self, value: bool):
        """Sets whether to obfuscate ages based on age groups.
        When `True`, the age groups specified in the ``ageGroups`` parameter will be used to obfuscate ages.
        When `False`, the age ranges specified in the ``ageRanges`` parameter will be used to obfuscate ages.

        Parameters
        ----------
        value : bool
            Whether to obfuscate ages based on age groups.
        """
        return self._set(obfuscateByAgeGroups=value)
    
    def setAgeGroups(self, value: dict):
        """Sets a dictionary of age groups to obfuscate ages.
        For this parameter to be active, the ``obfuscateByAgeGroups`` parameter must be true.
        If the given ``ageGroups`` do not fully contain the ages, the ages continue to be obfuscated according to the ``ageRanges`` parameter.
        The dictionary should contain the age group name as the key and an list of two integers as the value.
        The first integer is the lower bound of the age group, and the second integer is the upper bound of the age group.
        Default age groups are as follows in the English language:
        
        Default and example dictionary
        ------------------------------
        >>> { "baby": [0, 1],
        ...   "toddler": [1, 4],
        ...   "child": [4, 13],
        ...   "teenager": [13, 20],
        ...   "adult": [20, 65],
        ...   "senior": [65, 100] }

        Parameters
        ----------
        value : dict[str, List[int]]
            A dictionary of age groups to obfuscate ages.
        """
        self._call_java("setAgeGroups", value)
        return self

    def setKeepYear(self, value: bool):
        """Sets whether to keep the year intact when obfuscating date entities.
        If True, the year will remain unchanged during the obfuscation process.
        If False, the year will be modified along with the month and day.
        Default: False.

        Parameters
        ----------
        value : bool
            Whether to keep the year intact when obfuscating date entities.
        """
        return self._set(keepYear=value)
