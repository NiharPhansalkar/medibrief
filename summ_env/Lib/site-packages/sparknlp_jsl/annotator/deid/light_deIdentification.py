from sparknlp_jsl.common import *


class LightDeIdentification(AnnotatorModelInternal):
    """Light DeIdentification is a light version of DeIdentification. It replaces sensitive information
    in a text with obfuscated or masked fakers. It is designed to work with healthcare data,
    and it can be used to de-identify patient names, dates, and other sensitive information.
    It can also be used to obfuscate or mask any other type of sensitive information, such as doctor names, hospital
    names, and other types of sensitive information.

    Additionally, it supports millions of embedded fakers
    and If desired, custom external fakers can be set with setCustomFakers function.

    It also supports multiple languages such as English, Spanish, French, German, and Arabic.
    And it supports multi-mode de-Identification with setSelectiveObfuscationModes function at the same time.

    ========================================= ======================
    Input Annotation types                    Output Annotation type
    ========================================= ======================
    ``DOCUMENT, CHUNK``                       ``DOCUMENT``
    ========================================= ======================

    Parameters
    ----------
    mode: str
        Mode for Anonimizer ['mask'|'obfuscate']
    dateEntities: list[str]
        List of date entities. Default: ['DATE', 'DOB', 'DOD']
    obfuscateDate: bool
        When mode=='obfuscate' whether to obfuscate dates or not. This param helps in consistency to make dateFormats more visible.
        When setting to ``True``, make sure dateFormats param fits the needs.
        If the value is True and obfuscation is failed, then unnormalizedDateMode param will be activated.
        When setting to 'False', then the date will be masked to <DATE>.
        Default: False
    unnormalizedDateMode: str
        The mode to use if the date is not formatted. Options: [mask, obfuscate, skip]. Default: obfuscate.
    days: int
        A number of days to obfuscate the dates by displacement. If not provided a random integer between 1 and 60 will be used.
    useShiftDays: bool
        Whether to use the random shift day when the document has this in its metadata. Default: False
    dateFormats: list[str]
        List of date formats to automatically displace if parsed.
    region: str
        The region to use for date parsing. This property is especially used when obfuscating dates.
        You can decide whether the first part of 11/11/2023 is a day or the second part is a day when obfuscating dates.
        Options: 'eu' for European Union, 'us' for the USA, Default: 'eu'
    obfuscateRefSource: str
        The source of obfuscation of to obfuscate the entities. For dates entities, This property is invalid.
        The values ar the following:
        custom: Takes the entities from the setCustomFakers function.
        faker: Takes the entities from the Faker module
        both : Takes the entities from the setCustomFakers function and the faker module randomly.
    language: str
        The language used to select the regex file and some faker entities.
        The values are the following:
        'en'(English), 'de'(German), 'es'(Spanish), 'fr'(French), 'ar'(Arabic) or 'ro'(Romanian). Default:'en'.
    seed: int
        It is the seed to select the entities on obfuscate mode. With the seed,
        you can reply to an execution several times with the same output.
    maskingPolicy: str
        Select the masking policy:
            same_length_chars: Replace the obfuscated entity with a masking sequence composed of asterisks and surrounding squared brackets, being the total length of the masking sequence of the same length as the original sequence.
            Example, Smith -> [***].
            If the entity is less than 3 chars (like Jo, or 5), asterisks without brackets will be returned.
            entity_labels: Replace the values with the corresponding entity labels.
            fixed_length_chars: Replace the obfuscated entity with a masking sequence composed of a fixed number of asterisk.
    fixedMaskLength: int
        The length of the masking sequence in case of fixed_length_chars masking policy.
    sameLengthFormattedEntities: list[str]
        List of formatted entities to generate the same length outputs as original ones during obfuscation.
        The supported and default formatted entities are: PHONE, FAX, ID, IDNUM, BIOID, MEDICALRECORD, ZIP, VIN, SSN, DLN, LICENSE, PLATE.
    genderAwareness: bool
        Whether to use gender-aware names or not during obfuscation. This param effects only names.
        If the value is true, it might decrease performance. Default: False
    ageRanges: list[int]
        list of integer specifying limits of the age groups to preserve during obfuscation.
    selectiveObfuscationModes: dict[str, list[str]]
        The dictionary of modes to enable multi-mode deIdentification.
            'obfuscate': Replace the values with random values.
            'mask_same_length_chars': Replace the name with the asterisks with same length minus two plus brackets on both end.
            'mask_entity_labels': Replace the values with the entity value.
            'mask_fixed_length_chars': Replace the name with the asterisks with fixed length. You can also invoke "setFixedMaskLength()"
            'skip': Skip the values (intact)
        The entities which have not been given in dictionary will deidentify according to :param:`mode`
    customFakers: dict[str, list[str]]
        The dictionary of custom fakers to specify the obfuscation terms for the entities.
        You can specify the entity and the terms to be used for obfuscation.

    """

    inputAnnotatorTypes = [AnnotatorType.DOCUMENT, AnnotatorType.CHUNK]
    outputAnnotatorType = AnnotatorType.DOCUMENT

    name = "LightDeIdentification"

    mode = Param(Params._dummy(), "mode",
                 "Mode for Anonimizer ['mask'|'obfuscate']",
                 TypeConverters.toString)
    dateEntities = Param(Params._dummy(), "dateEntities",
                         "List of date entities.",
                         TypeConverters.toListString)
    obfuscateDate = Param(Params._dummy(), "obfuscateDate",
                          "When mode=='obfuscate' whether to obfuscate dates or not. This param helps in consistency to make dateFormats more visible. When setting to ``true``, make sure dateFormats param fits the needs (default: false)",
                          typeConverter=TypeConverters.toBoolean)
    unnormalizedDateMode = Param(Params._dummy(), "unnormalizedDateMode",
                                 "The mode to use if the date is not formatted.",
                                 TypeConverters.toString)
    days = Param(Params._dummy(), "days",
                 "Number of days to obfuscate by displacement the dates.",
                 TypeConverters.toInt)
    useShiftDays = Param(Params._dummy(), "useShiftDays",
                         "Whether to use the random shift day when the document has this in its metadata.",
                         TypeConverters.toBoolean)
    dateFormats = Param(Params._dummy(), "dateFormats",
                        "List of date formats to automatically displace if parsed",
                        typeConverter=TypeConverters.toListString)
    region = Param(Params._dummy(), "region",
                   "The region to use for date parsing. This property is especially used when obfuscating dates.",
                   TypeConverters.toString)
    obfuscateRefSource = Param(Params._dummy(), "obfuscateRefSource",
                               "The source of obfuscation to obfuscate the entities. Options: ['both'|'faker'|'custom]",
                               TypeConverters.toString)
    language = Param(Params._dummy(), "language",
                     "The language used to select the regex file and some faker entities",
                     TypeConverters.toString)
    seed = Param(Params._dummy(), "seed",
                 "It is the seed to select the entities on obfuscate mode",
                 TypeConverters.toInt)
    maskingPolicy = Param(Params._dummy(), "maskingPolicy",
                          "Select the masking policy:'same_length_chars', 'entity_labels', 'fixed_length_chars'",
                          TypeConverters.toString)
    fixedMaskLength = Param(Params._dummy(), "fixedMaskLength",
                            "The length of the masking sequence in case of fixed_length_chars masking policy.",
                            TypeConverters.toInt)
    sameLengthFormattedEntities = Param(Params._dummy(), "sameLengthFormattedEntities",
                                        "List of formatted entities to generate the same length outputs as original ones during obfuscation",
                                        TypeConverters.toListString)
    genderAwareness = Param(Params._dummy(),
                            "genderAwareness",
                            "Whether to use gender-aware names or not during obfuscation.",
                            TypeConverters.toBoolean)
    ageRanges = Param(Params._dummy(), "ageRanges",
                      "List of integers specifying limits of the age groups to preserve during obfuscation",
                      TypeConverters.toListInt)

    def __init__(self, classname="com.johnsnowlabs.nlp.annotators.deid.LightDeIdentification", java_model=None):
        super(LightDeIdentification, self).__init__(
            classname=classname,
            java_model=java_model
        )

    def setMode(self, mode: str):
        """Sets mode for Anonymizer ['mask'|'obfuscate']

        Parameters
        ----------
        mode : str
            Mode for Anonymizer ['mask'|'obfuscate']
        """
        return self._set(mode=mode)

    def setDateEntities(self, entities: list):
        """Sets list of date entities. Default: ['DATE', 'DOB', 'DOD']

        Parameters
        ----------
        entities : list[str]
            List of date entities.
        """
        return self._set(dateEntities=entities)

    def setObfuscateDate(self, value: bool):
        """When mode=='obfuscate' whether to obfuscate dates or not. This param helps in consistency to make dateFormats more visible.
        When setting to ``True``, make sure dateFormats param fits the needs.
        If the value is ``True`` and obfuscation is failed, then unnormalizedDateMode param will be activated.
        When setting to ``False``, then the date will be masked to <DATE>.
        Default: False

        Parameters
        ----------
        value : bool
            When mode=='obfuscate' whether to obfuscate dates or not. Default: False.
        """
        return self._set(obfuscateDate=value)

    def setUnnormalizedDateMode(self, mode: str):
        """Sets the mode to use if the date is not formatted.
        Options: [mask, obfuscate, skip]. Default: obfuscate.

        Parameters
        ----------
        mode : str
            The mode to use if the date is not formatted.
        """
        return self._set(unnormalizedDateMode=mode)

    def setDays(self, day: int):
        """Sets number of days to obfuscate by displacement the dates.
        If not provided a random integer between 1 and 60 will be used.

        Parameters
        ----------
        day: int
            Number of days to obfuscate by displacement the dates.
        """
        return self._set(days=day)

    def setUseShiftDays(self, value: bool):
        """Sets if you want to use the random shift day when the document has this in its metadata. Default: False

        Parameters
        ----------
        value : bool
            Whether to use the random shift day when the document has this in its metadata. Default: False
        """
        return self._set(useShiftDays=value)

    def setDateFormats(self, formats: list):
        """Sets list of date formats to automatically displace if parsed

        Parameters
        ----------
        formats : list[str]
            List of date formats to automatically displace if parsed
        """
        return self._set(dateFormats=formats)

    def setRegion(self, value: str):
        """ With this property, you can select particular dateFormats. This property is especially used when obfuscating dates.
        For example:
        Decide whether the first part of 11/11/2023 is a day or the second part is a day when obfuscating dates.
        The values are following:
        'eu' for European Union
        'us' for the USA
        Default: 'eu'

        Parameters
        ----------
        value : str
            The region to use select date formats. Options: 'eu' for European Union, 'us' for the USA, Default: 'eu'
        """
        return self._set(region=value)

    def setObfuscateRefSource(self, source: str):
        """The source of obfuscation to obfuscate the entities. For dates entities, This property is invalid.
        The values ar the following:
            custom: Takes the entities from the setCustomFakers function.
            faker: Takes the entities from the Faker module
            both : Takes the entities from the setCustomFakers function and the faker module randomly.

        Parameters
        ----------
        source : str
            The source of obfuscation to obfuscate the entities. Default: faker.
        """
        return self._set(obfuscateRefSource=source)

    def setLanguage(self, lang: str):
        """The language used to select the regex file and some faker entities.
        The values are the following:
        'en'(English), 'de'(German), 'es'(Spanish), 'fr'(French), 'ar'(Arabic) or 'ro'(Romanian).
        Default:'en'

        Parameters
        ----------
        lang : str
          The language used to select the regex file and some faker entities. Default:'en'.
        """
        return self._set(language=lang)

    def setSeed(self, s):
        """Sets the seed to select the entities on obfuscate mode. With the seed,
        you can reply to an execution several times with the same output.

        Parameters
        ----------
        s : int
            The seed to select the entities on obfuscate mode.
        """
        return self._set(seed=s)

    def setMaskingPolicy(self, mask: str):
        """Sets the masking policy:
            - same_length_chars: Replace the obfuscated entity with a masking sequence composed of asterisks and surrounding squared brackets,
            being the total length of the masking sequence of the same length as the original sequence. Example, Smith -> [***].
            If the entity is less than 3 chars (like Jo, or 5), asterisks without brackets will be returned.

            - entity_labels: Replace the values with the corresponding entity labels.
            - fixed_length_chars: Replace the obfuscated entity with a masking sequence composed of a fixed number of asterisks.

        Parameters
        ----------
        mask : str
            The masking policy
        """
        return self._set(maskingPolicy=mask)

    def setFixedMaskLength(self, length):
        """The length of the masking sequence in case of fixed_length_chars masking policy.
        Default: 7
        Parameters
        ----------
        length : int
           The length of the masking sequence in case of fixed_length_chars masking policy.
        """
        return self._set(fixedMaskLength=length)

    def setSameLengthFormattedEntities(self, value: list):
        """Sets list of formatted entities to generate the same length outputs as original ones during obfuscation

        Parameters
        ----------
        value : List[str]
        The supported and default formatted entities are: PHONE, FAX, ID, IDNUM, BIOID, MEDICALRECORD, ZIP, VIN, SSN, DLN, LICENSE, PLATE.
        """
        return self._set(sameLengthFormattedEntities=value)

    def setGenderAwareness(self, value: bool):
        """Set whether to use gender-aware names or not during obfuscation.
        This param effects only names.
        If value is true, it might decrease performance.
        Default: False

        Parameters
        ----------
        value : str
          Whether to use gender-aware names or not during obfuscation. This param effects only names.
          If value is true, it might decrease performance. Default: False
        """
        return self._set(genderAwareness=value)

    def setAgeRanges(self, value: list):
        """Sets list of integer specifying limits of the age groups to preserve during obfuscation.

        Parameters
        ----------
        value : List[int]
            List of integer specifying limits of the age groups to preserve during obfuscation.
        """
        return self._set(ageRanges=value)

    def setSelectiveObfuscationModes(self, value: dict):
        """Sets the dictionary of modes to enable multi-mode deIdentification.
            - 'obfuscate': Replace the values with random values.
            - 'mask_same_length_chars': Replace the name with the asterisks with same length minus two plus brackets on both end.
            - 'mask_entity_labels': Replace the values with the entity value.
            - 'mask_fixed_length_chars': Replace the name with the asterisks with fixed length. You can also invoke "setFixedMaskLength()"
            - 'skip': Skip the values (intact)
        The entities which have not been given in dictionary will deidentify according to :param:`mode`

        Example:
        --------
        >>> LightDeIdentification() \\
        >>>     .setMode('mask') \\
        >>>     .setSelectiveObfuscationModes({'obfuscate': ['PHONE', 'email'],
        >>>                                   'mask_entity_labels': ['NAME', 'CITY'],
        >>>                                   'skip': ['id']})

        Parameters
        ----------
        value : dict[str, list[str]]
            The dictionary of modes to enable multi-mode deIdentification.
        """
        self._call_java("setSelectiveObfuscationModes", value)
        return self

    def setCustomFakers(self, value: dict):
        """Sets the dictionary of custom fakers to specify the obfuscation terms for the entities.
        You can specify the entity and the terms to be used for obfuscation.

        Example:
        --------
        >>> LightDeIdentification() \\
        >>>     .setObfuscateRefSource('custom') \\
        >>>     .setCustomFakers({'NAME': ['John', 'Doe', 'Jane'],
        >>>                       'CITY': ['New York', 'Los Angeles'],
        >>>                       'SCHOOL': ['Oxford', 'Harvard']})

        Parameters
        ----------
        value : dict[str, list[str]]
            The dictionary of custom fakers to specify the obfuscation terms for the entities.
        """
        self._call_java("setCustomFakers", value)
        return self
