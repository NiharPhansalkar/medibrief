from sparknlp_jsl.common import *
from sparknlp_jsl.annotator.seq2seq.medical_text_generator import MedicalTextGenerator


class Text2SQL(MedicalTextGenerator):
    name = "Text2SQL"

    tableLimit = Param(Params._dummy(), "tableLimit",
                      "Maximum number of tables allowed",
                      typeConverter=TypeConverters.toInt)

    def setTableLimit(self, value):
        """
        Sets the maximum number of tables allowed for this model

        Parameters
        ----------
        value : int
        """
        return self._set(tableLimit=value)

    def setSchema(self, schema):
        """Set SQL schema

        Parameters
        ----------
        schema : dict[str, list[str]]
            SQL schema, a dictionary mapping table names to list of columns, e.g {"users": ["id", "name", "age"]}
        """
        table_limit = self.getTableLimit()
        if (table_limit > -1) and (table_limit < len(schema)):
            raise Exception(f"The maximum number of tables that can be used by this model is {table_limit}")
        self._call_java("setSchema", schema)
        return self

    def getSchema(self):
        """Get SQL schema
        """
        schema_string = self._call_java("getSQLSchemaStr")
        schema = {}
        for t in schema_string.split("\n"):
            parts = t.split(":")
            if len(parts) == 2:
                table, cols = parts
                cols = cols.split(",")
                schema[table] = cols

        return schema

    def setPostProcessingSubstitutions(self, substitutions):
        """Set post processing substitution strings

        Parameters
        ----------
        substitutions : dict[str, str]
            substitution strings
        """
        self._call_java("setPostProcessingSubstitutions", substitutions)
        return self

    def getPostProcessingSubstitutions(self):
        """Get post processing substitution strings
        """
        substitution_string = self._call_java("getPostProcessingSubstitutionsStr")
        substitutions = {}
        for t in substitution_string.split("\n"):
            parts = t.split(":")
            if len(parts) == 2:
                substitutions[parts[0]] = parts[1]

        return substitutions

    @keyword_only
    def __init__(self, classname="com.johnsnowlabs.nlp.annotators.seq2seq.Text2SQL", java_model=None):
        super(Text2SQL, self).__init__(
            classname=classname,
            java_model=java_model
        )
        self._setDefault(
            maxNewTokens=512,
            stopAtEos=True,
            tableLimit=-1
        )

    @staticmethod
    def loadSavedModel(folder, spark_session, model_type):
        """Loads a locally saved model.

        Parameters
        ----------
        folder : str
            Folder of the saved model
        spark_session : pyspark.sql.SparkSession
            The current SparkSession
        model_type : str
            The type of the model

        Returns
        -------
        Text2SQL
            The restored model
        """
        from sparknlp_jsl.internal import _Text2SQLLoader
        jModel = _Text2SQLLoader(folder, spark_session._jsparkSession, model_type)._java_obj
        return Text2SQL(java_model=jModel)

    @staticmethod
    def pretrained(name="text2sql_mimicsql", lang="en", remote_loc="clinical/models"):
        """Downloads and loads a pretrained model.

        Parameters
        ----------
        name : str, optional
            Name of the pretrained model, by default "text2sql_mimicsql"
        lang : str, optional
            Language of the pretrained model, by default "en"
        remote_loc : str, optional
            Optional remote address of the resource, by default None. Will use
            Spark NLPs repositories otherwise.

        Returns
        -------
        MedicalSummarizer
            The restored model
        """
        from sparknlp_jsl.pretrained import InternalResourceDownloader
        return InternalResourceDownloader.downloadModel(Text2SQL, name, lang, remote_loc,
                                                        j_dwn='InternalsPythonResourceDownloader')