from sparknlp_jsl.common import *


class DrugNormalizer(AnnotatorModelInternal):
    """Normalizes drug mentions in clinical text.

    Adds apaces between punctuation and words, as well as normalize the
    drug mentions. The `policy` parameter controls what drug information
    should be normalized, check the parameter documentation for details.
    
    For usage examples and discussion, check out
    `this blog post <https://medium.com/spark-nlp/normalize-drug-names-and-dosage-units-with-spark-nlp-8b7ef606facf>`_.

    ==============================  ======================
    Input Annotation types          Output Annotation type
    ==============================  ======================
    ``DOCUMENT``                    ``DOCUMENT``
    ==============================  ======================

    Parameters
    ----------
    lowercase
        Whether to convert strings to lowercase
    policy
        Policy to remove patterns from text. Defaults "all".

        Possible values are "all", "abbreviations", or "dosages".
        - "abbreviations" will replace all abbreviations with their full form (for example,
        replacing "oral sol" to "oral solution").
        - "dosages" will replace all dosages to a standardized form (for example,
        replacing "10 million units" to "10000000 unt").
        - "all" will replace both abbreviations and dosages.

    Examples
    --------

    >>> data = spark.createDataFrame([
    ...   ["Sodium Chloride/Potassium Chloride 13bag"],
    ...   ["interferon alfa-2b 10 million unit ( 1 ml ) injec"],
    ...   ["aspirin 10 meq/ 5 ml oral sol"]
    ... ]).toDF("text")
    >>> document = DocumentAssembler().setInputCol("text").setOutputCol("document")
    >>> drugNormalizer = DrugNormalizer().setInputCols(["document"]).setOutputCol("document_normalized")
    >>> trainingPipeline = Pipeline(stages=[document, drugNormalizer])
    >>> result = trainingPipeline.fit(data).transform(data)
    >>> result.selectExpr("explode(document_normalized.result) as normalized_text").show(truncate=False)
    +----------------------------------------------------+
    |normalized_text                                     |
    +----------------------------------------------------+
    |Sodium Chloride / Potassium Chloride 13 bag         |
    |interferon alfa - 2b 10000000 unt ( 1 ml ) injection|
    |aspirin 2 meq/ml oral solution                      |
    +----------------------------------------------------+

    """
    inputAnnotatorTypes = [AnnotatorType.DOCUMENT]
    outputAnnotatorType = AnnotatorType.DOCUMENT

    lowercase = Param(Params._dummy(),
                      "lowercase",
                      "whether to convert strings to lowercase",
                      typeConverter=TypeConverters.toBoolean)

    policy = Param(Params._dummy(),
                   "policy",
                   "policy to remove patterns from text. Defaults \"all\"",
                   typeConverter=TypeConverters.toString)

    @keyword_only
    def __init__(self):
        super(DrugNormalizer, self).__init__(classname="com.johnsnowlabs.nlp.annotators.DrugNormalizer")
        self._setDefault(
            lowercase=False,
            policy="all"
        )

    def setLowercase(self, value: bool):
        """Sets whether to convert strings to lowercase.

        Parameters
        ----------
        value : bool
            Whether to convert strings to lowercase
        """
        return self._set(lowercase=value)

    def setPolicy(self, value: str):
        """Sets policy to remove patterns from text.

        Possible values are "all", "abbreviations", or "dosages".
        - "abbreviations" will replace all abbreviations with their full form (for example,
        replacing "oral sol" to "oral solution").
        - "dosages" will replace all dosages to a standardized form (for example,
        replacing "10 million units" to "10000000 unt").
        - "all" will replace both abbreviations and dosages.

        Parameters
        ----------
        value : str
            policy to remove patterns from text.
        """
        return self._set(policy=value)
