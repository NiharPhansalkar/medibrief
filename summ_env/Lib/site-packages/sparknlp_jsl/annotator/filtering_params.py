from sparknlp_jsl.annotator.white_black_list_params import WhiteBlackListParams
from sparknlp_jsl.common import *


class FilteringParams(WhiteBlackListParams):
    """ It is a base class that contains filtering functions.
    """
    criteria = Param(Params._dummy(), "criteria", "It is used to compare black and white listed values with the result of the Annotation.", typeConverter = TypeConverters.toString)

    def setCriteria(self, value):
        """It is used to compare black and white listed values with the result of the Annotation.

        Possible values are the following: 'isin', 'regex'. Default: 'isin'.
        
        isin : Filter by the chunk
        regex : Filter by using a regex
        
        Parameters
        ----------
        value : string
            It is used to compare black and white listed values with the result of the Annotation.
            Possible values are the following: 'isin', 'regex'. Default: 'isin'.
        """
        return self._set(criteria = value)

    regex = Param(Params._dummy(), "regex", "If defined, list of regex to process the chunks", typeConverter = TypeConverters.toListString)

    def setRegex(self, value):
        """Sets If defined, list of regex to process the chunks.

        Parameters
        ----------
        value : List[str]
            If defined, list of regex to process the chunks
        """
        return self._set(regex = value)

    filterValue = Param(Params._dummy(), "filterValue", "possibles values result|entity", typeConverter = TypeConverters.toString)

    def setFilterValue(self, value):
        """Sets possible values 'result' or 'entity'.
        
        If the value is 'result', It filters according to the result of the Annotation.
        If the value is 'entity', It filters according to the entity field in the metadata of the Annotation.

        Parameters
        ----------
        value : string
            possible values are 'result' and 'entity'.
        """
        return self._set(filterValue = value)
