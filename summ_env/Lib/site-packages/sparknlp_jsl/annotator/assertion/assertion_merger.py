"""Contains Class for AssertionMerger"""
from sparknlp_jsl.annotator.white_black_list_params import WhiteBlackListParams
from sparknlp_jsl.common import *
from sparknlp_jsl.utils.licensed_annotator_type import InternalAnnotatorType


class AssertionMerger(AnnotatorModelInternal, WhiteBlackListParams):

    """Merges variety assertion columns coming from Assertion annotators like :class:`sparknlp_jsl.annotator.assertion.AssertionDLModel`.
    AssertionMerger can filter, prioritize and merge assertion annotations by using proper parameters.
    See Also: :class:`sparknlp_jsl.annotator.WhiteBlackListParams` for filtering options.

    =========================   ======================
    Input Annotation types      Output Annotation type
    =========================   ======================
    ``ASSERTION`` s             ``ASSERTION``
    =========================   ======================

    Parameters
    ----------
    mergeOverlapping: bool
        Whether to merge overlapping matched assertion annotations. Default: True
    applyFilterBeforeMerge: bool
        Whether to apply filtering before merging process. If True, filtering will be applied before merging;
        if False, filtering will be applied after merging process. Default: False.
    blackList: list[str]
        If defined, list of entities to ignore. The rest will be processed.
    whiteList: list[str]
        If defined, list of entities to process. The rest will be ignored. Do not include IOB prefix on labels.
    caseSensitive: bool
        Determines whether the definitions of the white listed and black listed entities are case sensitive. Default: True.
    assertionsConfidence: dict[str, float]
        Pairs (assertion,confidenceThreshold) to filter assertions which have confidence lower than the confidence threshold.
    orderingFeatures: list[str]
        Specifies the ordering features to use for overlapping entities.
        Possible values include: 'begin', 'end', 'length', 'source', 'confidence'.
        Default: ['begin', 'length', 'source']
    selectionStrategy: str
        Determines the strategy for selecting annotations.
        Annotations can be selected either sequentially based on their order (Sequential) or using a more diverse strategy (DiverseLonger).
        Currently, only Sequential and DiverseLonger options are available. Default: Sequential.
    defaultConfidence : float
        When the confidence value is included in the orderingFeatures and a given annotation does not have any confidence,
        this parameter determines the value to be used. The default value is 0.
    assertionSourcePrecedence: str
        Specifies the assertion sources to use for prioritizing overlapping annotations when the 'source' ordering feature is utilized.
        This parameter contains a comma-separated list of assertion sources that drive the prioritization.
        Annotations will be prioritized based on the order of the given string.
    sortByBegin: bool
        Whether to sort the annotations by begin at the end of the merge and filter process. Default: False.

    """

    name = "AssertionMerger"

    inputAnnotatorTypes = [InternalAnnotatorType.ASSERTION]
    outputAnnotatorType = InternalAnnotatorType.ASSERTION

    mergeOverlapping = Param(Params._dummy(), "mergeOverlapping",
                             "Whether to merge overlapping matched assertion annotations.",
                             typeConverter=TypeConverters.toBoolean)
    applyFilterBeforeMerge = Param(Params._dummy(), "applyFilterBeforeMerge",
                                   "Whether to apply filtering before merging process.",
                                   typeConverter=TypeConverters.toBoolean)
    orderingFeatures = Param(Params._dummy(), "orderingFeatures",
                             "Array of strings specifying the ordering features to use for overlapping entities.",
                             typeConverter=TypeConverters.toListString)
    selectionStrategy = Param(Params._dummy(), "selectionStrategy",
                              "Determines the strategy for selecting annotations.",
                              typeConverter=TypeConverters.toString)
    defaultConfidence = Param(Params._dummy(), "defaultConfidence",
                              "When the confidence value is included in the orderingFeatures and a given annotation does not have any confidence, this parameter determines the value to be used.",
                              typeConverter=TypeConverters.toFloat)
    assertionSourcePrecedence = Param(Params._dummy(), "assertionSourcePrecedence",
                                      "Specifies the assertion sources to use for prioritizing overlapping annotations when the 'source' ordering feature is utilized.",
                                      typeConverter=TypeConverters.toString)
    sortByBegin = Param(Params._dummy(), "sortByBegin",
                        "Whether to sort the annotations by begin at the end of the merge and filter process.",
                        typeConverter=TypeConverters.toBoolean)

    def __init__(self, classname="com.johnsnowlabs.nlp.annotators.assertion.merger.AssertionMerger", java_model=None):
        super(AssertionMerger, self).__init__(
            classname=classname,
            java_model=java_model
        )

    def setMergeOverlapping(self, value):
        """Sets whether to merge overlapping matched assertion annotations.
        
        Parameters
        ----------
        value : bool
            Whether to merge overlapping matched assertion annotations. Default: True.
        """
        return self._set(mergeOverlapping=value)

    def setApplyFilterBeforeMerge(self, value):
        """Sets whether to apply filtering before merging process. If True, filtering will be applied before merging;
        if False, filtering will be applied after merging process. Default: False.
        
        Parameters
        ----------
        value : bool
            Whether to apply filtering before merging process.
        """
        return self._set(applyFilterBeforeMerge=value)

    def setAssertionsConfidence(self, value: dict):
        """Sets Pairs (assertion,confidenceThreshold) to filter assertions which have confidence lower than the confidence threshold.
        
        Parameters
        ----------
        value : dict[str, float]
            Pairs (assertion,confidenceThreshold) to filter assertions which have confidence lower than the confidence threshold.
        """
        self._call_java("setAssertionsConfidence", value)
        return self

    def setOrderingFeatures(self, value: list):
        """Sets array of strings specifying the ordering features to use for overlapping entities.
        Possible values include: 'begin', 'end', 'length', 'source', 'confidence'.
        Default: ['begin', 'length', 'source']

        Parameters
        ----------
        value : list[str]
            Array of strings specifying the ordering features to use for overlapping entities.
        """
        return self._set(orderingFeatures=value)

    def setSelectionStrategy(self, value):
        """Determines the strategy for selecting annotations.
        Annotations can be selected either sequentially based on their order (Sequential) or using a more diverse strategy (DiverseLonger).
        Currently, only Sequential and DiverseLonger options are available. Default: Sequential.

        Parameters
        ----------
        value : str
            Determines the strategy for selecting annotations.
        """
        return self._set(selectionStrategy=value)

    def setDefaultConfidence(self, value):
        """Sets When the confidence value is included in the orderingFeatures and a given annotation does not have any confidence,
        this parameter determines the value to be used.

        Parameters
        ----------
        value : float
            When the confidence value is included in the orderingFeatures and a given annotation does not have any confidence,
            this parameter determines the value to be used. The default value is 0.
        """
        return self._set(defaultConfidence=value)

    def setAssertionSourcePrecedence(self, value):
        """Sets Specifies the assertion sources to use for prioritizing overlapping annotations when the 'source' ordering feature is utilized.
        This parameter contains a comma-separated list of assertion sources that drive the prioritization.
        Annotations will be prioritized based on the order of the given string.

        Parameters
        ----------
        value : str
            Specifies the assertion sources to use for prioritizing overlapping annotations when the 'source' ordering feature is utilized.
        """
        return self._set(assertionSourcePrecedence=value)

    def setSortByBegin(self, value):
        """Sets whether to sort the annotations by begin at the end of the merge and filter process. Default: False.

        Parameters
        ----------
        value : bool
            Whether to sort the annotations by begin at the end of the merge and filter process. Default: False.
        """
        return self._set(sortByBegin=value)

    def setInputCols(self, *value):
        """Sets column names of input annotations.
        Parameters
        ----------
        *value : str
            Input columns for the annotator
        """
        # Overloaded setInputCols to evade validation until updated on Spark-NLP side
        if type(value[0]) == str or type(value[0]) == list:
            # self.inputColsValidation(value)
            if len(value) == 1 and type(value[0]) == list:
                return self._set(inputCols=value[0])
            else:
                return self._set(inputCols=list(value))
        else:
            raise TypeError("InputCols datatype not supported. It must be either str or list")
