"""
This module is a wrapper for the NerQuestionGenerator class in the Scala API.
"""

from sparknlp_jsl.common import *


class NerQuestionGenerator(AnnotatorModelInternal):
    """Automatically generates questions for NER.

    This annotator takes an NER chunk (obtained by, e.g., `NerConverterInternal`) and
    generates a questions based on two entity types, a pronoun and a strategy.

    The question is generated in the form of [QUESTIONPRONOUN] [ENTITY1] [ENTITY2] [QUESTIONMARK].

    The generated question can be used by `QuestionAnswerer`annotator
    to find answers to the generated questions.
    
    ====================== =======================
    Input Annotation types Output Annotation type
    ====================== =======================
    ``CHUNK``              ``LABEL_DEPENDENCY``
    ====================== =======================

    Args:
        pronoun (str): Pronoun to be used in the question. E.g., 'When', 'Where', 'Why', 'How', 'Who', 'What'.
        strategyType (str): Strategy for the proccess. Either `Paired` or `Combined`.
        questionMark (bool): Whether to add a question mark at the end of the question.
        entities1 (list): List with the entity types of entities that appear first in the question.
        entities2 (list): List with the entity types of entities that appear second in the question.

    Examples:
        >>> qagenerator = (
        ...    NerQuestionGenerator()
        ...    .setInputCols(["ner_chunk"])
        ...    .setOutputCol("question")
        ...    .setQuestionMark(True)
        ...    .setQuestionPronoun("When")
        ...    .setStrategyType("Paired")
        ...    .setEntities1(["PATIENT"])
        ...    .setEntities2(["ADMISSION"])
        ... )
        >>> qagenerator..fit(data).transform(data).select("question").show(truncate=False)
        +--------------------------------------------------------+
        |question                                                |
        +--------------------------------------------------------+
        |[{document, 0, 25, When John Smith was admitted ? ...}] |
        +--------------------------------------------------------+

    See also:
        `NerConverterInternal <https://nlp.johnsnowlabs.com/docs/en/licensed_annotators#nerconverterinternal>`_,
        `QuestionAnswerer <https://nlp.johnsnowlabs.com/docs/en/licensed_annotators#questionanswering>`_,
        `ZeroShotNer <https://nlp.johnsnowlabs.com/docs/en/licensed_annotators#zeroshotnermodel>`_
    """
    inputAnnotatorTypes = [AnnotatorType.CHUNK]
    outputAnnotatorType = AnnotatorType.DOCUMENT
    name = "NerQuestionGenerator"

    questionPronoun = Param(
        Params._dummy(),
        "questionPronoun",
        "Pronoun to be used in the question. E.g., 'When', 'Where', 'Why', 'How', 'Who', 'What'",
        typeConverter=TypeConverters.toString,
    )

    strategyType = Param(
        Params._dummy(),
        "strategyType",
        "Strategy for the proccess, either `Paired` or `Combined`.",
        typeConverter=TypeConverters.toString,
    )

    questionMark = Param(
        Params._dummy(),
        "questionMark",
        "Whether we want to add a question mark at the end of the question.",
        typeConverter=TypeConverters.toBoolean,
    )

    entities1 = Param(
        Params._dummy(),
        "entities1",
        "List with the entity types of entities that appear first in the question.",
        typeConverter=TypeConverters.toListString,
    )

    entities2 = Param(
        Params._dummy(),
        "entities2",
        "List with the entity types of entities that appear second in the question.",
        typeConverter=TypeConverters.toListString,
    )

    def setQuestionMark(self, value:bool):
        """Sets whether we want to add a question mark at the end of the question.

        Defaults to False.

        Args:
            value (bool): True if we want to add a question mark at the end of the question, False otherwise.
        """
        return self._set(questionMark=value)

    def setStrategyType(self, value:str):
        """Sets the strategy to be used in the proccess. Either `Paired` or `Combined`.

        If set to `Paired` (default), applies a one-vs-one strategy. In this case, the number of chunks
        in Entity 1 must be aligned with the number of chunks in Entity 2. E.g., if Entity 1 has
        3 chunks and Entity 2 has 3 chunks, the first chunk of Entity 1 will be grouped with first chunk of Entity 2,
        the second with second, third with third, etc.
        
        If set to `Combined`, applies a one-vs-all strategy. In this case, the number of chunks
        in Entity 1 don't need to be the same as the number of chunks in Entity 2, and each chunk
        in Entity 1 will be grouped with all chunks in Entity 2.

        Args:
            value (str): The strategy to be used.
        """
        return self._set(strategyType=value)

    def setEntities1(self, entities:list):
        """Sets the list of entity types that appear first in the question.

        Args:
            entities (list): List of entity types.
        """
        return self._set(entities1=entities)

    def setEntities2(self, entities):
        """Sets the list of entity types that appear second in the question.

        Args:
            entities (list): List of entity types.
        """
        return self._set(entities2=entities)

    def setQuestionPronoun(self, pronoun):
        """Sets the pronoun to be used in the question.

        E.g., 'When', 'Where', 'Why', 'How', 'Who', 'What'.
        Defaults to empty string ("").

        Args:
            pronoun (str): The pronoun to be used.
        """
        return self._set(questionPronoun=pronoun)

    def __init__(self, classname="com.johnsnowlabs.nlp.annotators.qa.NerQuestionGenerator", java_model=None):
        super(NerQuestionGenerator, self).__init__(
            classname=classname,
            java_model=java_model
        )
