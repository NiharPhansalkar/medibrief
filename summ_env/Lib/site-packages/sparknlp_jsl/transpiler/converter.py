from sparknlp_jsl.transpiler.builder import build_python_code, build_scala_code, prepare_python_code
from sparknlp_jsl.transpiler.python_2_scala import run_transpiler



def run_converter(py_code, build_py_code, build_sc_code, spark= None):
    """Run the Python to Scala code conversion and building process.

    Args:
        py_code (str): The Python code to be converted to Scala.
        build_py_code (bool): Flag to indicate whether to build the Python code.
        build_sc_code (bool): Flag to indicate whether to build the generated Scala code.
        spark (SparkSession, optional): The SparkSession to use for building the Python code. Defaults to None.

    Returns:
        dict: A dictionary containing the results of the conversion and building process.
            - "python_code_failed" (int): Number of times Python code failed to build.
            - "scala_generated" (int): Number of times Scala code was successfully generated.
            - "generated_code_works" (int): Number of times the generated Scala code worked.
            - "generated_code_failed" (int): Number of times the generated Scala code failed to build.
    """
    global scala_code_works, python_code_failed, scala_generated, generated_code_works, generated_code_failed, generated_scala_code

    results = {
        "python_code_failed": 0,
        "scala_generated": 0,
        "generated_code_works": 0,
        "generated_code_failed": 0
    }
    if build_py_code:
        python_code = prepare_python_code(spark=spark, import_section=True, py_code=py_code)
        print(python_code)
        py_build_result = build_python_code(python_code)
    else:
        py_build_result = "0"

    if py_build_result == "1":
        print("\nINFO : Source Python Code has mistakes.")
        results["python_code_failed"] += 1
    else:
        print("\nINFO :Source Python Code is correct or build_py_code is false. It is time to convert it to Scala.")
        generated_scala_code = run_transpiler(py_code)
        print("\nINFO : GENERATED SCALA CODE \n\n" + generated_scala_code)
        results["scala_generated"] += 1

        if build_sc_code:
            scala_build_result = build_scala_code(generated_scala_code)
        else:
            scala_build_result = "0"
        if scala_build_result == "0":
            print("\nINFO :Scala code works or build_sc_code is false.")
            results["generated_code_works"] += 1
        else:
            print(f"\nINFO :Failure in generated Scala code\n{generated_scala_code}")
            results["generated_code_failed"] += 1

    print(f"\nINFO :Results for: {results}")
    return generated_scala_code
