"""
The script provides functionality to upload Scala code to Git, handling the transpilation
 process and updating Markdown files containing both Python and Scala code.
"""
import os

from sparknlp_jsl.transpiler.builder import  prepare_python_code, build_python_code, \
    build_scala_code
from sparknlp_jsl.transpiler.python_2_scala import run_transpiler, prepare_scala_code
from sparknlp_jsl.transpiler.source_loader import get_python_code_from_md, update_md_file, get_scala_code_from_md
from sparknlp_jsl.utils.run_transpiled_code import RunTranspiledCode

scala_code_works = 0
python_code_failed = 0
scala_generated = 0
generated_code_works = 0
generated_code_failed = 0

results_list = []


def upload_scala_code_in_md_file(md_file_path,spark= None):
    """
    Uploads Scala code to md_file, handling the transpilation process and updating Markdown files.

    Args:
        md_file_path (str): Path to the Markdown file.

    Returns:
        dict: A dictionary containing the results for the given Markdown file.
    """
    global scala_code_works, python_code_failed, scala_generated, generated_code_works, generated_code_failed

    # Initialize a dictionary to store the results for the current md_file_path
    results = {
        "md_file_path": md_file_path,
        "scala_code_works": 0,
        "python_code_failed": 0,
        "scala_generated": 0,
        "generated_code_works": 0,
        "generated_code_failed": 0
    }

    scala_code = get_scala_code_from_md(md_file_path)
    if scala_code != "1":
        print(f"\nINFO :SCALA CODE IN {md_file_path} FILE")
        print(scala_code)

    if len(scala_code) < 100:
        scala_build_result = "1"
    else:
        prepared_scala_code = prepare_scala_code(is_spark_initialized=True, import_section=True, scala_code=scala_code)
        scala_build_result = RunTranspiledCode.build_scala_code( prepared_scala_code)

    if scala_build_result != "0":
        print(f"\nINFO :{md_file_path} \nINFO :Scala Code in .md file is wrong or missing. Transpiler is started.")
        py_code = get_python_code_from_md(md_file_path)
        py_code = prepare_python_code(spark=spark, import_section=True, py_code=py_code)
        print("\nINFO :PREPARED PYTHON CODE \n\n" + py_code)
        print("\nINFO :BUILDING PYTHON CODE \n\n")
        py_build_result = build_python_code(py_code)

        if py_build_result == "1":
            print(f"\nINFO :Source Python Code in {md_file_path} has mistakes.")
            results["python_code_failed"] += 1
        else:
            print(f"\nINFO :Source Python Code in {md_file_path} is executable. It is time to convert it to SCALA")
            py_code = get_python_code_from_md(md_file_path)
            generated_scala_code = run_transpiler(py_code)
            generated_scala_code = generated_scala_code.replace("\\", "")
            print("INFO :GENERATED SCALA CODE \n\n" + generated_scala_code)
            scala_build_result = build_scala_code(generated_scala_code)
            results["scala_generated"] += 1
            if scala_build_result == "0":
                print(f"\nINFO :{md_file_path} \nINFO : The generated Scala code works. Let us UPDATE .md file ")
                update_md_file(md_file_path)
                results["generated_code_works"] += 1
            else:
                print(f"\nINFO :{md_file_path} Failure in generated_scala_code\n{generated_scala_code}")
                print(scala_build_result)
                results["generated_code_failed"] += 1

    else:
        print("\nINFO :Scala Code in .md file looks good. ")
        results["scala_code_works"] += 1

    print(f"\nINFO :Results for {md_file_path}: {results}")
    return results


def apply_method_to_all_md_files(directory_path):
    """
    Applies the upload_scala_code_in_git method to all Markdown files in the specified directory.

    Args:
        directory_path (str): Path to the directory containing Markdown files.
    """
    # Get all files in the specified directory
    all_files = [f for f in os.listdir(directory_path) if os.path.isfile(os.path.join(directory_path, f))]

    # Select files with the .md extension
    md_files = [f for f in all_files if f.endswith('.md')]

    # Apply the method for each .md file
    for md_file in md_files:
        md_file_path = os.path.join(directory_path, md_file)
        results_list.append(upload_scala_code_in_md_file(md_file_path))

    print(
        f"\nINFO :scala_code_works: {scala_code_works}, python_code_wrong: {python_code_failed}, scala_generated: {scala_generated}, generated_code_works: {generated_code_works}")
