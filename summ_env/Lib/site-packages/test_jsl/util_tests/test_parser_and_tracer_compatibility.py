import unittest
from pyspark.ml import Pipeline
from pyspark.ml import PipelineModel
from pyspark.sql import DataFrame
from sparknlp.pretrained import PretrainedPipeline

import sparknlp_jsl
from sparknlp_jsl.annotator import *
from sparknlp_jsl.pipeline_output_parser import PipelineOutputParser

from sparknlp_jsl.pipeline_tracer import PipelineTracer
from test_jsl.util import SparkContextForTest


class TracerAndParserCompactTestCase(unittest.TestCase):
    spark = SparkContextForTest.spark

    def test_clinical_deidentification(self):
        pretrained_pipeline = PretrainedPipeline("clinical_deidentification", "en", "clinical/models")
        tracer = PipelineTracer(pretrained_pipeline)
        columns = tracer.createParserDictionary()
        columns.update({"document_identifier": "clinical_deidentification"})
        columns_directly = PipelineTracer.getParserDictDirectly("clinical_deidentification", "en", "clinical/models")
        assert columns == columns_directly
        parser = PipelineOutputParser(columns)
        results = pretrained_pipeline.fullAnnotate("""Record date: 2093-01-13, David Hale, M.D., Name: Hendrickson, Ora MR. # 7194334 Date: 01/13/93 PCP: Oliveira, 25 years old, Record date: 1-11-2000. Cocke County Baptist Hospital. 0295 Keats Street. Phone +1 (302) 786-5227. The patient's complaints first surfaced when he started working for Brothers Coal-Mine.""")
        result = parser.run(results)
        print(result)
        assert result.get("result")[0].get("deidentifications")[0].get("original")[0] != []

    def test_explain_clinical_doc_public_health(self):
        pretrained_pipeline = PretrainedPipeline("explain_clinical_doc_vop", "en", "clinical/models")
        tracer = PipelineTracer(pretrained_pipeline)
        columns = tracer.createParserDictionary()
        columns.update({"document_identifier": "explain_clinical_doc_vop"})
        columns_directly = PipelineTracer.getParserDictDirectly("explain_clinical_doc_vop", "en", "clinical/models")
        assert columns == columns_directly
        parser = PipelineOutputParser(columns)
        results = pretrained_pipeline.fullAnnotate("""The patient is a 30-year-old female with a long history of insulin dependent diabetes, type 2. She received a course of Bactrim for 14 days for UTI.  She was prescribed 5000 units of Fragmin  subcutaneously daily, and along with Lantus 40 units subcutaneously at bedtime.""")
        result = parser.run(results)
        print(result)
        assert result.get("result")[0].get("entities")[0] != {}

if __name__ == '__main__':
    unittest.main()