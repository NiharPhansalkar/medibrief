import unittest

from test_jsl.util import SparkContextForTest
import sparknlp
import sparknlp_jsl
from sparknlp.pretrained import PretrainedPipeline
from sparknlp_jsl.pipeline_output_parser import PipelineOutputParser
class PipelineOutputParserTestCase(unittest.TestCase):

    def setUp(self):
        self.spark = SparkContextForTest.spark
        self.column_maps = {
            "document_identifier": "XYZ_123",
            "document_text": "document",
            "entities": ["merged_chunk","assertion_chunk"],
            "assertions": ["assertion_oncology_wip","assertion_oncology_test_binary_wip"],
            "resolutions": [],
            "relations": ["re_oncology_wip","re_oncology_granular_wip","re_oncology_biomarker_result_wip"],
            "summaries": [],
            "deidentifications": [],
            "classifications": []
        }

    def test_assertion_and_relation(self):

        oncology_pipeline = PretrainedPipeline("oncology_biomarker_pipeline", "en", "clinical/models")
        pipeline_parser = PipelineOutputParser(self.column_maps)
        columns_dict = pipeline_parser.__dict__

        text = [
            """Immunohistochemistry was negative for thyroid transcription factor-1 and napsin A. The test was positive for ER and PR, and negative for HER2.""",
            """The had previously undergone a left mastectomy and an axillary lymph node dissection for a left breast cancer twenty years ago. The tumor was positive for ER and PR. Postoperatively, radiotherapy was administered to the residual breast. The cancer recurred as a right lung metastasis 13 years later. He underwent a regimen consisting of adriamycin (60 mg/m2) and cyclophosphamide (600 mg/m2) over six courses, as first line therapy."""
        ]

        results = oncology_pipeline.fullAnnotate(text)

        parsed_result = pipeline_parser.run(results)
        assert columns_dict["document_identifier"] == 'XYZ_123'
        assert columns_dict["document_text"] == 'document'
        assert len(parsed_result["result"]) == 2
        assert parsed_result["result"][0]["document_text"][0] == text[0]
        assert parsed_result["result"][1]["document_text"][0] == text[1]
        print(parsed_result["result"][0]["entities"][0])

    def test_summary(self):
        pass
        #summarizer_pipeline = PretrainedPipeline("summarizer_clinical_jsl_pipeline", "en", "clinical/models")
        #
        #text = """Patient with hypertension, syncope, and spinal stenosis - for recheck.
        #(Medical Transcription Sample Report)
        #SUBJECTIVE:
        #The patient is a 78-year-old female who returns for recheck. She has hypertension. She denies difficulty with chest pain, palpations, orthopnea, nocturnal dyspnea, or edema.
        #PAST MEDICAL HISTORY / SURGERY / HOSPITALIZATIONS:
        #Reviewed and unchanged from the dictation on 12/03/2003.
        #MEDICATIONS:
        #Atenolol 50 mg daily, Premarin 0.625 mg daily, calcium with vitamin D two to three pills daily, multivitamin daily, aspirin as needed, and TriViFlor 25 mg two pills daily. She also has Elocon cream 0.1% and Synalar cream 0.01% that she uses as needed for rash.
        #"""
        #
        #text_list = [text, text]
        #print(summarizer_pipeline.model.stages[-1].getOutputCol())
        #results = summarizer_pipeline.fullAnnotate(text_list)
        #from sparknlp_jsl.pipeline_output_parser import PipelineOutputParser
        #
        #column_maps = {
        #    'document_identifier': '4145551212 LLC - 33379',
        #    'document_text': 'document',
        #    'entities': [],
        #    'relations': [],
        #    'summaries': ['summary']
        #}
        #
        #pipeline_parser = PipelineOutputParser(column_maps)
        #print(pipeline_parser.__dict__)
        #parsed_result = pipeline_parser.run(results)
        #print(parsed_result)



if __name__ == '__main__':
    unittest.main()
