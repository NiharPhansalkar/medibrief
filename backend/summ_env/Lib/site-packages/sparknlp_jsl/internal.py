from sparknlp.internal import ExtendedJavaWrapper


class _UpdateCacheModels(ExtendedJavaWrapper):
    """Updates the cache models in the specified folder.

    If no folder is specified, it will update the cache models in the default folder.
    """
    def __init__(self, cache_folder=""):
        super(_UpdateCacheModels, self).__init__(
            "com.johnsnowlabs.util.UpdateModels.updateCacheModels", cache_folder)


class _UpdateModels(ExtendedJavaWrapper):
    """Updates the models given the cutoff date.
    """
    def __init__(self, model_names, language, remote_loc, start_date, end_date, cache_folder):
        super(_UpdateModels, self).__init__(
            "com.johnsnowlabs.util.PythonUpdateModels.updateModels", model_names, language, remote_loc, start_date, end_date, cache_folder)


class _HadoopOperations(ExtendedJavaWrapper):
    """Hadoop operations.
    """
    def __init__(self, local_file, hdfs_file):
        super(_HadoopOperations, self).__init__(
            "com.johnsnowlabs.util.HadoopOperations.moveFile", local_file, hdfs_file)


class _MedicalBertTokenClassifierLoader(ExtendedJavaWrapper):
    """Loader class for the MedicalBertTokenClassifierModel annotator.

    This class is used to load the MedicalBertTokenClassifierModel annotator
    from licensed pretrained models.
    """
    def __init__(self, path, jspark):
        super(_MedicalBertTokenClassifierLoader, self).__init__(
            "com.johnsnowlabs.nlp.annotators.classification.MedicalBertForTokenClassifier.loadSavedModel", path, jspark)


class _MedicalBertTokenClassifierLoaderOpensource(ExtendedJavaWrapper):
    """Loader class for the MedicalBertTokenClassifierModel annotator.

    This class is used to load the MedicalBertTokenClassifierModel annotator
    from pretrained open-source models.
    """
    def __init__(self, bertForTokenClassifierPath, tfModelPath, jspark):
        super(_MedicalBertTokenClassifierLoaderOpensource, self).__init__(
            "com.johnsnowlabs.nlp.annotators.classification.MedicalBertForTokenClassifier.loadSavedModelOpenSource",
            bertForTokenClassifierPath, tfModelPath, jspark)


class _MedicalBertForSequenceClassificationLoader(ExtendedJavaWrapper):
    """Loader class for the MedicalBertForSequenceClassification annotator.

    This class is used to load the MedicalBertForSequenceClassificationModel annotator
    from licensed pretrained models.
    """
    def __init__(self, path, jspark):
        super(_MedicalBertForSequenceClassificationLoader, self).__init__(
            "com.johnsnowlabs.nlp.annotators.classification.MedicalBertForSequenceClassification.loadSavedModel", path,
            jspark)


class _MedicalBertForSequenceClassificationLoaderOpensource(ExtendedJavaWrapper):
    """Loader class for the MedicalBertForSequenceClassification annotator.

    This class is used to load the MedicalBertForSequenceClassificationModel annotator
    from pretrained open-source models.
    """
    def __init__(self, bertForSequenceClassifierPath, tfModelPath, jspark):
        super(_MedicalBertForSequenceClassificationLoaderOpensource, self).__init__(
            "com.johnsnowlabs.nlp.annotators.classification.MedicalBertForSequenceClassification.loadSavedModelOpenSource",
            bertForSequenceClassifierPath, tfModelPath, jspark)


class _FinanceBertForSequenceClassificationLoaderOpensource(ExtendedJavaWrapper):
    """Loader class for the FinanceBertForSequenceClassification annotator.

    This class is used to load the FinanceBertForSequenceClassificationModel annotator
    from pretrained open-source models.
    """
    def __init__(self, bertForSequenceClassifierPath, tfModelPath, jspark):
        super(_FinanceBertForSequenceClassificationLoaderOpensource, self).__init__(
            "com.johnsnowlabs.finance.sequence_classification.FinanceBertForSequenceClassification.loadSavedModelOpenSource",
            bertForSequenceClassifierPath, tfModelPath, jspark)


class _FinanceBertForSequenceClassificationLoader(ExtendedJavaWrapper):
    """Loader class for the FinanceBertForSequenceClassification annotator.

    This class is used to load the FinanceBertForSequenceClassificationModel annotator
    from licensed pretrained models.
    """
    def __init__(self, path, jspark):
        super(_FinanceBertForSequenceClassificationLoader, self).__init__(
            "com.johnsnowlabs.finance.sequence_classification.FinanceBertForSequenceClassification.loadSavedModel", path, jspark)


class _FinanceBertTokenClassificationLoader(ExtendedJavaWrapper):
    """Loader class for the FinanceBertTokenClassificationModel annotator.

    This class is used to load the FinanceBertTokenClassificationModel annotator
    from licensed pretrained models.
    """
    def __init__(self, path, jspark):
        super(_FinanceBertTokenClassificationLoader, self).__init__(
            "com.johnsnowlabs.finance.token_classification.ner.FinanceBertForTokenClassification.loadSavedModel", path, jspark)


class _FinanceBertTokenClassificationLoaderOpensource(ExtendedJavaWrapper):
    """Loader class for the FinanceBertTokenClassificationModel annotator.

    This class is used to load the FinanceBertTokenClassificationModel annotator
    from pretrained open-source models.
    """
    def __init__(self, bertForTokenClassifierPath, tfModelPath, jspark):
        super(_FinanceBertTokenClassificationLoaderOpensource, self).__init__(
            "com.johnsnowlabs.finance.token_classification.ner.FinanceBertForTokenClassification.loadSavedModelOpenSource",
            bertForTokenClassifierPath, tfModelPath, jspark)


class _LegalBertForSequenceClassificationLoaderOpensource(ExtendedJavaWrapper):
    def __init__(self, bertForSequenceClassifierPath, tfModelPath, jspark):
        super(_LegalBertForSequenceClassificationLoaderOpensource, self).__init__(
            "com.johnsnowlabs.legal.sequence_classification.LegalBertForSequenceClassification.loadSavedModelOpenSource",
            bertForSequenceClassifierPath, tfModelPath, jspark)


class _LegalBertForSequenceClassificationLoader(ExtendedJavaWrapper):
    """Loader class for the LegalBertForSequenceClassification annotator.

    This class is used to load the LegalBertForSequenceClassificationModel annotator
    from pretrained open-source models.
    """
    def __init__(self, path, jspark):
        super(_LegalBertForSequenceClassificationLoader, self).__init__(
            "com.johnsnowlabs.legal.sequence_classification.LegalBertForSequenceClassification.loadSavedModel",
            path, jspark)


class _LegalBertForTokenClassificationLoaderOpensource(ExtendedJavaWrapper):
    def __init__(self, bertForSequenceClassifierPath, tfModelPath, jspark):
        super(_LegalBertForTokenClassificationLoaderOpensource, self).__init__(
            "com.johnsnowlabs.legal.token_classification.ner.LegalBertForTokenClassification.loadSavedModelOpenSource",
            bertForSequenceClassifierPath, tfModelPath, jspark)


class _LegalBertForTokenClassificationLoader(ExtendedJavaWrapper):
    """Loader class for the LegalBertForTokenClassification annotator.

    This class is used to load the LegalBertForTokenClassificationModel annotator
    from pretrained open-source models.
    """
    def __init__(self, path, jspark):
        super(_LegalBertForTokenClassificationLoader, self).__init__(
            "com.johnsnowlabs.legal.token_classification.ner.LegalBertForTokenClassification.loadSavedModel",
            path, jspark)


class _MedicalDistilBertForSequenceClassificationLoader(ExtendedJavaWrapper):
    """Loader class for the MedicalDistilBertForSequenceClassification annotator.

    This class is used to load the MedicalDistilBertForSequenceClassificationModel annotator
    from licensed pretrained models.
    """
    def __init__(self, path, jspark):
        super(_MedicalDistilBertForSequenceClassificationLoader, self).__init__(
            "com.johnsnowlabs.nlp.annotators.classification.MedicalDistilBertForSequenceClassification.loadSavedModel",
            path, jspark)


class _MedicalDistilBertForSequenceClassificationLoaderOpensource(ExtendedJavaWrapper):
    """Loader class for the MedicalDistilBertForSequenceClassification annotator.

    This class is used to load the MedicalDistilBertForSequenceClassificationModel annotator
    from pretrained open-source models.
    """
    def __init__(self, destilbertForSequenceClassifierPath, tfModelPath, jspark):
        super(_MedicalDistilBertForSequenceClassificationLoaderOpensource, self).__init__(
            "com.johnsnowlabs.nlp.annotators.classification.MedicalDistilBertForSequenceClassification.loadSavedModelOpenSource",
            destilbertForSequenceClassifierPath, tfModelPath, jspark)


class _BertSentenceEmbeddingsToBertSentenceChunkEmbeddingsLoader(ExtendedJavaWrapper):
    """Loader class for the BertSentenceEmbeddingsToBertSentenceChunkEmbeddings annotator.

    This class is used to load the BertSentenceEmbeddingsToBertSentenceChunkEmbeddingsModel
    annotator from pretrained models.
    """
    def __init__(self, path):
        super(_BertSentenceEmbeddingsToBertSentenceChunkEmbeddingsLoader, self).__init__(
            "com.johnsnowlabs.nlp.annotators.embeddings.BertSentenceChunkEmbeddings.load", path)


class _ZeroShotRelationExtractionModelLoader(ExtendedJavaWrapper):
    """Loader class for the ZeroShotRelationExtraction annotator.

    This class is used to load the ZeroShotRelationExtractionModel annotator
    from pretrained models.
    """
    def __init__(self, path, jspark):
        super(_ZeroShotRelationExtractionModelLoader, self).__init__(
            "com.johnsnowlabs.nlp.annotators.re.ZeroShotRelationExtractionModel.loadSavedModel", path, jspark)


class _LegalZeroShotRelationExtractionModelLoader(ExtendedJavaWrapper):
    """Loader class for the LegalZeroShotRelationExtraction annotator.

    This class is used to load the LegalZeroShotRelationExtractionModel annotator
    from pretrained models.
    """
    def __init__(self, path, jspark):
        super(_ZeroShotRelationExtractionModelLoader, self).__init__(
            "com.johnsnowlabs.legal.graph.relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel", path, jspark)


class _FinanceZeroShotRelationExtractionModelLoader(ExtendedJavaWrapper):
    """Loader class for the FinanceZeroShotRelationExtraction annotator.

    This class is used to load the FinanceZeroShotRelationExtractionModel annotator
    from pretrained models.
    """
    def __init__(self, path, jspark):
        super(_ZeroShotRelationExtractionModelLoader, self).__init__(
            "com.johnsnowlabs.legal.graph.relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel", path, jspark)


class _EntityWeights(ExtendedJavaWrapper):
    """Java wrapper class for the EntityWeights parameter.
    """
    def __init__(self, weights):
        super(_EntityWeights, self).__init__("com.johnsnowlabs.nlp.param.EntityWeights.fromJava", weights)


class _TargetEntities(ExtendedJavaWrapper):
    """Java wrapper class for the TargetEntities parameter.
    """
    def __init__(self, entities):
        super(_TargetEntities, self).__init__("com.johnsnowlabs.nlp.param.TargetEntities.fromJava", entities)


class _CustomLabels(ExtendedJavaWrapper):
    """Java wrapper class for the CustomLabels parameter.	
    """
    def __init__(self, labels):
        super(_CustomLabels, self).__init__("com.johnsnowlabs.nlp.param.CustomLabels.fromJava", labels)


class _RelationalCategories(ExtendedJavaWrapper):
    """Java wrapper class for the RelationalCategories parameter.
    """
    def __init__(self, categories):
        super(_RelationalCategories, self).__init__(
            "com.johnsnowlabs.nlp.param.RelationalCategories.fromJava", categories)


class _ShowUnCategorizedResources(ExtendedJavaWrapper):
    """Shows the uncategorized resources available for download.
    """
    def __init__(self):
        super(_ShowUnCategorizedResources, self).__init__(
            "com.johnsnowlabs.nlp.pretrained.PythonResourceDownloader.showUnCategorizedResources")


class _ReturnPrivateModels(ExtendedJavaWrapper):
    """Returns the private models available for download.
    """
    def __init__(self,annotator, lang, version):
        super(_ReturnPrivateModels, self).__init__(
            "com.johnsnowlabs.nlp.pretrained.InternalsPythonResourceDownloader.returnPrivateModels",annotator, lang, version)


class _ReturnPrivatePipelines(ExtendedJavaWrapper):
    """Returns the private pipelines available for download.
    """
    def __init__(self, lang, version):
        super(_ReturnPrivatePipelines, self).__init__(
            "com.johnsnowlabs.nlp.pretrained.InternalsPythonResourceDownloader.returnPrivatePipelines", lang, version)


class _ShowPrivatePipelines(ExtendedJavaWrapper):
    """Shows the private pipelines available for download.
    """
    def __init__(self, lang, version):
        super(_ShowPrivatePipelines, self).__init__(
            "com.johnsnowlabs.nlp.pretrained.InternalsPythonResourceDownloader.showPrivatePipelines", lang, version)


class _ShowPrivateModels(ExtendedJavaWrapper):
    """Shows the private models available for download.
    """
    def __init__(self, annotator, lang, version):
        super(_ShowPrivateModels, self).__init__(
            "com.johnsnowlabs.nlp.pretrained.InternalsPythonResourceDownloader.showPrivateModels", annotator, lang, version)


class _ShowAvailableAnnotators(ExtendedJavaWrapper):
    """Shows the available annotators.
    """
    def __init__(self):
        super(_ShowAvailableAnnotators, self).__init__(
            "com.johnsnowlabs.nlp.pretrained.InternalsPythonResourceDownloader.showAvailableAnnotators")


class _DownloadModelDirectly(ExtendedJavaWrapper):
    """
    Downloads a model directly to the cache folder.
    """
    def __init__(self, s3_file_path, remote_loc="public/models", unzip=True, cache_folder_path=""):
        super(_DownloadModelDirectly, self).__init__(
            "com.johnsnowlabs.nlp.pretrained.InternalsPythonResourceDownloader.downloadModelDirectly", s3_file_path, remote_loc, unzip, cache_folder_path)


class _MedicalNerGraphBuilder(ExtendedJavaWrapper):
    """Gets the parameters needed for building Tensorflow graphs for NER.
    """
    def __init__(self, dataset, input_col, label_col):
        super(_MedicalNerGraphBuilder, self).__init__(
            "com.johnsnowlabs.nlp.annotators.ner.MedicalNerApproach.getGraphParams",
            dataset, input_col, label_col)


class _RelationExtractionGraphBuilder(ExtendedJavaWrapper):
    """Gets the parameters needed for building Tensorflow graphs for Relation Extraction.
    """
    def __init__(self, dataset):
        super(_RelationExtractionGraphBuilder, self).__init__(
            "com.johnsnowlabs.nlp.annotators.re.RelationExtractionApproach.getGraphParams", dataset)


def EntityWeights(weights):
    """Entity weights parameter used by other annotators.
    """
    return _EntityWeights(weights).apply()


def TargetEntities(entities):
    """Target entities parameter used by other annotators.
    """
    return _TargetEntities(entities).apply()


def CustomLabels(labels):
    """Custom labels parameter used by other annotators.
    """	
    return _CustomLabels(labels).apply()


def RelationalCategories(categories):
    """Relational categories parameter used by other annotators.
    """
    return _RelationalCategories(categories).apply()


class _RobertaQAToZeroShotNerLoader(ExtendedJavaWrapper):
    """Loader class for RobertaQAToZeroShotNer annotator.

    This class is used to load the RobertaQAToZeroShotNerModel annotator
    from pretrained models.
    """
    def __init__(self, path):
        super(_RobertaQAToZeroShotNerLoader, self).__init__(
            "com.johnsnowlabs.nlp.annotators.ner.ZeroShotNerModel.load", path)


class _RobertaQAToFinanceZeroShotNerLoader(ExtendedJavaWrapper):
    """Loader class for RobertaQAToFinanceZeroShotNer annotator.

    This class is used to load the RobertaQAToFinanceZeroShotNerModel annotator
    from pretrained models.
    """
    def __init__(self, path):
        super(_RobertaQAToFinanceZeroShotNerLoader, self).__init__(
            "com.johnsnowlabs.finance.token_classification.ner.ZeroShotNerModel.load", path)


class _RobertaQAToLegalZeroShotNerLoader(ExtendedJavaWrapper):
    """Loader class for RobertaQAToLegalZeroShotNer annotator.	

    This class is used to load the RobertaQAToLegalZeroShotNerModel annotator
    from pretrained models.
    """
    def __init__(self, path):
        super(_RobertaQAToLegalZeroShotNerLoader, self).__init__(
            "com.johnsnowlabs.legal.token_classification.ner.ZeroShotNerModel.load", path)

class _MedicalQuestionAnsweringLoader(ExtendedJavaWrapper):
    """Loader class for the MedicalQuestionAnswering annotator.

    This class is used to load the MedicalQuestionAnswering annotator
    from pretrained models.
    """
    def __init__(self, path, jspark):
        super(_MedicalQuestionAnsweringLoader, self).__init__(
            "com.johnsnowlabs.nlp.annotators.qa.MedicalQuestionAnswering.loadSavedModel", path, jspark)

class _MedicalQuestionAnsweringConverter(ExtendedJavaWrapper):
    """Converter class for the MedicalQuestionAnswering annotator.

    This class is used to convert a MedicalTextGenerator to MedicalQuestionAnswering
    """
    def __init__(self, path, jspark):
        super(_MedicalQuestionAnsweringConverter, self).__init__(
            "com.johnsnowlabs.nlp.annotators.qa.MedicalQuestionAnswering.loadMedicalTextGenerator", path, jspark)



class _MedicalSummarizerLoader(ExtendedJavaWrapper):
    """Loader class for the MedicalSummarizer annotator.

    This class is used to load the MedicalSummarizer annotator
    from pretrained models.
    """
    def __init__(self, path, jspark, use_cache):
        super(_MedicalSummarizerLoader, self).__init__(
            "com.johnsnowlabs.nlp.annotators.seq2seq.MedicalSummarizer.loadSavedModel", path, jspark, use_cache)


class _MedicalTextGeneratorLoader(ExtendedJavaWrapper):
    """Loader class for the MedicalTextGenerator annotator.

    This class is used to load the MedicalTextGenerator annotator
    from pretrained models.
    """
    def __init__(self, path, jspark, model_type):
        super(_MedicalTextGeneratorLoader, self).__init__(
            "com.johnsnowlabs.nlp.annotators.seq2seq.MedicalTextGenerator.loadSavedModel", path, jspark, model_type)

class _FinanceQuestionAnsweringLoader(ExtendedJavaWrapper):
    """Loader class for the FinanceQuestionAnswering annotator.
    This class is used to load the FinanceQuestionAnswering annotator
    from pretrained models.
    """
    def __init__(self, path, jspark):
        super(_FinanceQuestionAnsweringLoader, self).__init__(
            "com.johnsnowlabs.finance.sequence_generation.FinanceQuestionAnswering.loadSavedModel", path, jspark)


class _FinanceSummarizerLoader(ExtendedJavaWrapper):
    """Loader class for the FinanceSummarizer annotator.
    This class is used to load the FinanceSummarizer annotator
    from pretrained models.
    """
    def __init__(self, path, jspark, use_cache):
        super(_FinanceSummarizerLoader, self).__init__(
            "com.johnsnowlabs.finance.sequence_generation.FinanceSummarizer.loadSavedModel", path, jspark, use_cache)


class _FinanceTextGeneratorLoader(ExtendedJavaWrapper):
    """Loader class for the FinanceTextGenerator annotator.
    This class is used to load the FinanceTextGenerator annotator
    from pretrained models.
    """
    def __init__(self, path, jspark, model_type):
        super(_FinanceTextGeneratorLoader, self).__init__(
            "com.johnsnowlabs.finance.sequence_generation.FinanceTextGenerator.loadSavedModel", path, jspark, model_type)


class _LegalQuestionAnsweringLoader(ExtendedJavaWrapper):
    """Loader class for the LegalQuestionAnswering annotator.
    This class is used to load the LegalQuestionAnswering annotator
    from pretrained models.
    """
    def __init__(self, path, jspark):
        super(_LegalQuestionAnsweringLoader, self).__init__(
            "com.johnsnowlabs.legal.sequence_generation.LegalQuestionAnswering.loadSavedModel", path, jspark)


class _LegalSummarizerLoader(ExtendedJavaWrapper):
    """Loader class for the LegalSummarizer annotator.
    This class is used to load the LegalSummarizer annotator
    from pretrained models.
    """
    def __init__(self, path, jspark, use_cache):
        super(_LegalSummarizerLoader, self).__init__(
            "com.johnsnowlabs.legal.sequence_generation.LegalSummarizer.loadSavedModel", path, jspark, use_cache)


class _LegalTextGeneratorLoader(ExtendedJavaWrapper):
    """Loader class for the LegalTextGenerator annotator.
    This class is used to load the LegalTextGenerator annotator
    from pretrained models.
    """
    def __init__(self, path, jspark, model_type):
        super(_LegalTextGeneratorLoader, self).__init__(
            "com.johnsnowlabs.legal.sequence_generation.LegalTextGenerator.loadSavedModel", path, jspark, model_type)

class _Text2SQLLoader(ExtendedJavaWrapper):
    """Loader class for the Text2SQL annotator.

    This class is used to load the Text2SQL annotator
    from pretrained models.
    """
    def __init__(self, path, jspark, model_type):
        super(_Text2SQLLoader, self).__init__(
            "com.johnsnowlabs.nlp.annotators.seq2seq.Text2SQL.loadSavedModel", path, jspark, model_type)


class _HCCFromICD(ExtendedJavaWrapper):
    """Returns a mapping of Risk Adjustment Hierarchical Condition Categories (RXHCC)
    or Hierarchical Condition Categories (HCC)
    based on a list of (ICD-10) codes for a specific measurement year.
    """
    def __init__(self, module: str, version: str, year: int, icd10_codes: list):
        super(_HCCFromICD, self).__init__(
            "com.johnsnowlabs.nlp.jsl.PythonRiskAdjustmentUtil.HCC_from_ICD", module, version, year, icd10_codes)


class _HCCLabels(ExtendedJavaWrapper):
    """Retrieves the medical descriptions associated with a given list of Risk Adjustment Hierarchical Condition Categories (RXHCCs)
     or Hierarchical Condition Categories (HCCs) for a specified measurement year.
    """
    def __init__(self, module: str, version: str, year: int, hcc_list: list):
        super(_HCCLabels, self).__init__(
            "com.johnsnowlabs.nlp.jsl.PythonRiskAdjustmentUtil.HCC_labels", module, version, year, hcc_list)


class _DiffBetweenHCCs(ExtendedJavaWrapper):
    """Calculates the difference between two lists of Hierarchical Condition Categories (HCCs) or
    Risk Adjustment Hierarchical Condition Categories (RXHCCs) for a specific measurement year.
    """
    def __init__(self, module: str, version: str, year: int, before_HCC_list: list, after_HCC_list: list):
        super(_DiffBetweenHCCs, self).__init__(
            "com.johnsnowlabs.nlp.jsl.PythonRiskAdjustmentUtil.diff_between_HCCs", module, version, year, before_HCC_list, after_HCC_list)