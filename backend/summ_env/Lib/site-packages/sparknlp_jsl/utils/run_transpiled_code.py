from sparknlp.internal import ExtendedJavaWrapper


class RunTranspiledCode(object):

    @staticmethod
    def build_scala_code(scala_code: str):
        """
        Compile and execute the provided Scala code.

        :param scala_code: str, the Scala code to be executed.
        :return: '0' or '1'.
        """
        result = _RunScalaCode(scala_code).apply()
        return result

    @staticmethod
    def compile_scala_code(scala_code: str):
        """
        Compile the provided Scala code without execution.

        :param scala_code: str, the Scala code to be compiled.
        :return: '0' or '1'.
        """
        result = _CompileScalaCode(scala_code).apply()
        return result


class _RunScalaCode(ExtendedJavaWrapper):
    """ Internal class for executing transpiled Scala code.
    """

    def __init__(self, scala_code: str):
        super(_RunScalaCode, self).__init__(
            "com.johnsnowlabs.util.RunTranspiledCode.executeScalaCode", scala_code)


class _CompileScalaCode(ExtendedJavaWrapper):
    """Internal class for compiling transpiled Scala code without execution.
    """

    def __init__(self, scala_code: str):
        super(_CompileScalaCode, self).__init__(
            "com.johnsnowlabs.util.RunTranspiledCode.compileScalaCode", scala_code)
