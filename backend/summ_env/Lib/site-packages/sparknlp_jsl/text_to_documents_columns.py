from typing import List
import re
from pyspark.sql import DataFrame
from pyspark.sql import SparkSession


class TextToDocumentsColumns:
    """Converts a DataFrame with columns of string texts into a DataFrame with columns of Document annotations.

    Args:
        spark (SparkSession): The current SparkSession.
        columns (List[str]): The name of the column to convert.
    """
    def __init__(self, spark: SparkSession, columns: List[str]):
        self.columns = columns
        self.spark = spark

        self.instance = self.spark._jvm.com.johnsnowlabs.nlp.annotators.deid.TextToDocumentColumns(
            columns
        )

    def toDocumentsColumns(self, df: DataFrame):
        """Converts a DataFrame with columns of string texts into a DataFrame with columns of Document annotations.
        """
        match = re.compile(r'[0-9]+.[0-9]+.[0-9]+').search(self.spark.version)
        if match:
            version = int("".join(match.group(0).split(".")))
            if version >= 330:
                return DataFrame(self.instance.toDocumentsColumns(df._jdf), self.spark._getActiveSessionOrCreate())
            else:
                return DataFrame(self.instance.toDocumentsColumns(df._jdf), self.spark._wrapped)
        else:
            try:
                return DataFrame(self.instance.toDocumentsColumns(df._jdf), self.spark._getActiveSessionOrCreate())
            except:
                return DataFrame(self.instance.toDocumentsColumns(df._jdf), self.spark._wrapped)

