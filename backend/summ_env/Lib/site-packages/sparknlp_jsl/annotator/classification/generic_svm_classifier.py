from sparknlp_jsl.common import *
from sparknlp_jsl.annotator.generic_classifier.generic_classifier import GenericClassifierApproach
from sparknlp_jsl.annotator.generic_classifier.generic_classifier import GenericClassifierModel
from sparknlp_jsl.utils.licensed_annotator_type import InternalAnnotatorType

class GenericSVMClassifierApproach(GenericClassifierApproach):
    """
    SVMClassifier is a derivative of GenericClassifier which implements
    SVM (Support Vector Machine) classification. The input to the model is FeatureVector and the output is
    category annotations with labels and corresponding confidence scores. The scores are standardized using the
    logistic function so that they vary between 0 and 1.

    ====================== ======================
    Input Annotation types Output Annotation type
    ====================== ======================
    ``FEATURE_VECTIR``    ``CATEGORY``
    ====================== ======================
    """

    inputAnnotatorTypes = [InternalAnnotatorType.FEATURE_VECTOR]
    outputAnnotatorType = AnnotatorType.CATEGORY

    name = "GenericSVMClassifierApproach"

    def __init__(self, classname="com.johnsnowlabs.nlp.annotators.classification.GenericSVMClassifierApproach"):
        super(GenericSVMClassifierApproach, self).__init__(classname=classname)

class GenericSVMClassifierModel(GenericClassifierModel):
    """
    SVMClassifier is a derivative of GenericClassifier which implements
    SVM (Support Vector Machine) classification. The input to the model is FeatureVector and the output is
    category annotations with labels and corresponding confidence scores. The scores are standardized using the
    logistic function so that they vary between 0 and 1.

    ====================== ======================
    Input Annotation types Output Annotation type
    ====================== ======================
    ``FEATURE_VECTIR``    ``CATEGORY``
    ====================== ======================
    """
    inputAnnotatorTypes = [InternalAnnotatorType.FEATURE_VECTOR]
    outputAnnotatorType = AnnotatorType.CATEGORY

    name = "GenericSVMClassifierModel"

    def __init__(self, classname="com.johnsnowlabs.nlp.annotators.classification.GenericSVMClassifierModel",
                 java_model=None):
        super(GenericSVMClassifierModel, self).__init__(
            classname=classname,
            java_model=java_model
        )

    @staticmethod
    def pretrained(name="generic_svm_classifier_ade", lang="en", remote_loc="clinical/models"):
        """Downloads and loads a pretrained model.

        Parameters
        ----------
        name : str, optional
            Name of the pretrained model, by default "generic_svm_classifier_ade"
        lang : str, optional
            Language of the pretrained model, by default "en"
        remote_loc : str, optional
            Optional remote address of the resource, by default "clinical/models". Will use
            Spark NLPs repositories otherwise.

        Returns
        -------
        GenericSVMClassifierModel
            The restored model
        """
        from sparknlp_jsl.pretrained import InternalResourceDownloader
        return InternalResourceDownloader.downloadModel(GenericSVMClassifierModel, name, lang, remote_loc,
                                                        j_dwn='InternalsPythonResourceDownloader')