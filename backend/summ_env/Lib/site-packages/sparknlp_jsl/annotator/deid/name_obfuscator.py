from pyspark import keyword_only
from pyspark.ml.param import TypeConverters, Params, Param
from sparknlp.internal import AnnotatorTransformer

from sparknlp_jsl.common import *

class NameChunkObfuscatorApproach(AnnotatorApproachInternal):

    """Contains all the methods for training a NameChunkObfuscator model.
    This module can replace name, patient,and doctor entities with consistent fakers.

    ========================================= ======================
    Input Annotation types                    Output Annotation type
    ========================================= ======================
    ``CHUNK``                                  ``CHUNK``
    ========================================= ======================

     Parameters
    ----------
    obfuscateRefFile
        File with the faker names to be used for obfuscation
    refFileFormat
        Format of the reference file
    refSep
        Seperator character in refFile
    seed
        The seed to select the names on obfuscation. With the seed, you can reply an execution several times with the same output.
    obfuscateRefSource
        Mode for select obfuscation source ['both'|'faker'| 'file']
    language
        The language used to select some faker names.
        The values are the following:
        'en'(English), 'de'(German), 'es'(Spanish), 'fr'(French), 'ar'(Arabic) or 'ro'(Romanian).
        Default:'en'
    sameLength
        The sameLength used to select the same length names as original ones during obfuscation. Default: true
    nameEntities
        The nameEntities used to select entities during obfuscation. The supported name entities are NAME, PATIENT, and DOCTOR. Default: 'NAME'
    genderAwareness
        Whether to use gender-aware names or not during obfuscation. This param effects only names.
        If value is true, it might decrease performance. Default: False

    Examples
    -------
    >>> import sparknlp
    >>> from sparknlp.base import *
    >>> from sparknlp_jsl.common import *
    >>> from sparknlp.annotator import *
    >>> from sparknlp.training import *
    >>> import sparknlp_jsl
    >>> from sparknlp_jsl.base import *
    >>> from sparknlp_jsl.annotator import *
    >>> from pyspark.ml import Pipeline
    >>> documentAssembler = DocumentAssembler() \\
    ...     .setInputCol("text") \\
    ...     .setOutputCol("document")
    ...
    >>>  sentenceDetector = SentenceDetector() \\
    ...     .setInputCols(["document"]) \\
    ...     .setOutputCol("sentence") \\
    ...     .setUseAbbreviations(True)
    ...
    >>> tokenizer = Tokenizer() \\
    ...     .setInputCols(["sentence"]) \\
    ...     .setOutputCol("token")
    ...
    >>> embeddings = WordEmbeddingsModel \\
    ...     .pretrained("embeddings_clinical", "en", "clinical/models") \\
    ...     .setInputCols(["sentence", "token"]) \\
    ...     .setOutputCol("embeddings") \\
    ...
     Ner entities
    >>> clinical_sensitive_entities = MedicalNerModel \\
    ...     .pretrained("ner_deid_enriched", "en", "clinical/models") \\
    ...     .setInputCols(["sentence", "token", "embeddings"]).setOutputCol("ner")
    ...
    >>> nerConverter = NerConverter() \\
    ...     .setInputCols(["sentence", "token", "ner"]) \\
    ...     .setOutputCol("ner_chunk")
     NameChunkObfuscatorApproach
    >>> nameChunkObfuscator = NameChunkObfuscatorApproach() \\
    ...     .setInputCols(["ner_chunk"]) \\
    ...     .setOutputCol("replacement") \\
    ...     .setRefFileFormat("csv") \\
    ...     .setRefSep("#") \\
    ...     .setObfuscateRefFile("obfuscator_names.txt") \\
    ...     .setObfuscateRefSource("both") \\
    ...     .setLanguage("en")
    ...
    >>> replacer_name = Replacer() \\
    ...     .setInputCols("replacement", "sentence") \\
    ...     .setOutputCol("obfuscated_name") \\
    ...     .setUseReplacement(True)
    Pipeline
    >>> data = spark.createDataFrame([
    ...     ["John Davies is a 62 y.o. patient admitted.He was seen by attending physician Dr. Lorand and was scheduled for emergency assessment."]
    ...     ]).toDF("text")
    >>> pipeline = Pipeline(stages=[
    ...     documentAssembler,
    ...     sentenceDetector,
    ...     tokenizer,
    ...     embeddings,
    ...     clinical_sensitive_entities,
    ...     nerConverter,
    ...     nameChunkObfuscator,
    ...     replacer_name
    ... ])
    >>> result = pipeline.fit(data).transform(data)
    >>> result.select("obfuscated_name.result").show(truncate = False)
      +-------------------------------------------------------------------------------------------------------------------------------------+
      |result                                                                                                                               |
      +-------------------------------------------------------------------------------------------------------------------------------------+
      |[Charlestine is a 62 y.o. patient admitted.He was seen by attending physician Dr. Lowery and was scheduled for emergency assessment.]|
      +-------------------------------------------------------------------------------------------------------------------------------------+
    """
    inputAnnotatorTypes = [AnnotatorType.CHUNK]
    outputAnnotatorType = AnnotatorType.CHUNK
    obfuscateRefFile = Param(Params._dummy(), "obfuscateRefFile", "File with the terms to be used for Obfuscation",
                             TypeConverters.toString)
    refFileFormat = Param(Params._dummy(), "refFileFormat", "Format of the reference file",
                          TypeConverters.toString)
    refSep = Param(Params._dummy(), "refSep", "Sep character in refFile",
                   TypeConverters.toString)
    seed = Param(Params._dummy(), "seed", "It is the seed to select the names on obfuscation",
                 TypeConverters.toInt)
    obfuscateRefSource = Param(Params._dummy(), "obfuscateRefSource", "The source of obfuscation to obfuscate the names",
                               TypeConverters.toString)
    language = Param(Params._dummy(), "language", "The language used to select some faker names",
                     TypeConverters.toString)
    sameLength = Param(Params._dummy(), "sameLength", "The sameLength used to select the same length names as original ones during obfuscation.",
                       TypeConverters.toBoolean)
    nameEntities = Param(Params._dummy(), "nameEntities",
                         "The nameEntities used to select entities during obfuscation.",
                         TypeConverters.toListString)
    genderAwareness = Param(Params._dummy(),
                            "genderAwareness",
                            "Whether to use gender-aware names or not during obfuscation.",
                            TypeConverters.toBoolean)

    @keyword_only
    def __init__(self):
        super(NameChunkObfuscatorApproach, self).__init__(classname="com.johnsnowlabs.nlp.annotators.deid.NameChunkObfuscatorApproach")


    def setObfuscateRefFile(self, f):
        """Set file with the terms to be used for Obfuscation

        Parameters
        ----------
        f : str
            File with the terms to be used for Obfuscation
        """
        return self._set(obfuscateRefFile=f)

    def setRefFileFormat(self, f):
        """Sets format of the reference file

        Parameters
        ----------
        f : str
            Format of the reference file
        """
        return self._set(refFileFormat=f)

    def setRefSep(self, c):
        """Sets separator character in refFile

        Parameters
        ----------
        f : str
            Separator character in refFile
        """
        return self._set(refSep=c)

    def setSeed(self, s):
        """Sets the seed to select the names on obfuscation. With the seed, you can reply an execution several times
         with the same output.

        Parameters
        ----------
        s : int
            The seed to select the names on obfuscation. With the seed, you can reply an execution several times
         with the same output.
        """
        return self._set(seed=s)

    def setObfuscateRefSource(self, s):
        """Sets mode for select obfuscate source ['both'|'faker'| 'file']
        Default: 'both'

        Parameters
        ----------
        s : str
            Mode for select obfuscate source ['both'|'faker'| 'file]
        """
        return self._set(obfuscateRefSource=s)

    def setLanguage(self, l):
        """The language used to select some faker names.
        The values are the following:
        'en'(English), 'de'(German), 'es'(Spanish), 'fr'(French), 'ar'(Arabic) or 'ro'(Romanian).
        Default:'en'

        Parameters
        ----------
        l : str
          The language used to select some faker names.'en'(english),'de'(german), 'es'(Spanish), 'fr'(french) or 'ro'(romanian)
        """
        return self._set(language=l)

    def setSameLength(self, l):
        """The sameLength used to select the same length names as original ones during obfuscation.
        Example: 'John' --> 'Mike'.
        Default: true

        Parameters
        ----------
        l : bool
          The sameLength used to select the same length names as original ones during obfuscation. Default: true
        """
        return self._set(sameLength=l)

    def setNameEntities(self, n):
        """The nameEntities used to select entities during obfuscation.
        The supported name entities are NAME, PATIENT, and DOCTOR.
        Default: 'NAME'

        Parameters
        ----------
        n : List[str]
        The nameEntities used to select entities during obfuscation. The supported name entities are NAME, PATIENT, and DOCTOR. Default: 'NAME'
        """
        return self._set(nameEntities=n)

    def setGenderAwareness(self, l):
        """Set whether to use gender-aware names or not during obfuscation.
        This param effects only names.
        If value is true, it might decrease performance.
        Default: False

        Parameters
        ----------
        l : str
          Whether to use gender-aware names or not during obfuscation. This param effects only names. If value is true, it might decrease performance. Default: False
        """
        return self._set(genderAwareness=l)

    def _create_model(self, java_model:str):
        """Creates the model using the java model.

        Args:
            java_model (str): The name of the java model.
        """
        return NameChunkObfuscator(java_model=java_model)


class NameChunkObfuscator(AnnotatorModelInternal):
    """Pretraind model to obfuscate names in a text.
    
    Contains all the parameters to transform a dataset with an Input Annotation
    of type CHUNK, into its obfuscated version of by obfuscating the given CHUNKS.
    This module can replace name, patient,and doctor entities with consistent fakers, remain others same.

    ========================================= ======================
    Input Annotation types                    Output Annotation type
    ========================================= ======================
    ``CHUNK``                                  ``CHUNK``
    ========================================= ======================

     Parameters
    ----------
    obfuscateRefFile
        File with the faker names to be used for obfuscation
    refFileFormat
        Format of the reference file
    refSep
        Seperator character in refFile
    seed
        The seed to select the names on obfuscation. With the seed, you can reply an execution several times with the same output.
    obfuscateRefSource
        Mode for select obfuscation source ['both'|'faker'| 'file']
    language
        The language used to select some faker names.
        The values are the following:
        'en'(English), 'de'(German), 'es'(Spanish), 'fr'(French), 'ar'(Arabic) or 'ro'(Romanian).
        Default:'en'
    sameLength
        The sameLength used to select the same length names as original ones during obfuscation. Default: true
    nameEntities
        The nameEntities used to select entities during obfuscation. The supported name entities are NAME, PATIENT, and DOCTOR. Default: 'NAME'
    genderAwareness
        Whether to use gender-aware names or not during obfuscation. This param effects only names.
        If value is true, it might decrease performance. Default: False
    """

    inputAnnotatorTypes = [AnnotatorType.CHUNK]
    outputAnnotatorType = AnnotatorType.CHUNK

    seed = Param(Params._dummy(), "seed", "It is the seed to select the names. With the seed you can reply an execution several times with the same output.",
                 TypeConverters.toInt)
    obfuscateRefSource = Param(Params._dummy(), "obfuscateRefSource", "The source of obfuscation to obfuscate the names",
                               TypeConverters.toString)
    language = Param(Params._dummy(), "language", "The language used to select some faker names",
                     TypeConverters.toString)
    sameLength = Param(Params._dummy(), "sameLength", "The sameLength used to select the same length names as original ones during obfuscation.",
                       TypeConverters.toBoolean)
    nameEntities = Param(Params._dummy(), "nameEntities",
                         "The nameEntities used to select entities during obfuscation.",
                         TypeConverters.toListString)
    genderAwareness = Param(Params._dummy(),
                            "genderAwareness",
                            "Whether to use gender-aware names or not during obfuscation.",
                            TypeConverters.toBoolean)

    def setSeed(self, s):
        """Sets the seed to select the names on obfuscation. With the seed, you can reply an execution several times
         with the same output.

        Parameters
        ----------
        s : int
            The seed to select the names on obfuscation. With the seed, you can reply an execution several times
         with the same output.
        """
        return self._set(seed=s)

    def setObfuscateRefSource(self, s):
        """Sets mode for select obfuscate source ['both'|'faker'| 'file']
        Default: 'both'

        Parameters
        ----------
        s : str
            Mode for select obfuscate source ['both'|'faker'| 'file]
        """
        return self._set(obfuscateRefSource=s)

    def setLanguage(self, l):
        """The language used to select some faker names.
        The values are the following:
        'en'(English), 'de'(German), 'es'(Spanish), 'fr'(French), 'ar'(Arabic) or 'ro'(Romanian).
        Default:'en'

        Parameters
        ----------
        l : str
          The language used to select some faker names.'en'(english),'de'(german), 'es'(Spanish), 'fr'(french) or 'ro'(romanian)
        """
        return self._set(language=l)

    def setSameLength(self, l):
        """The sameLength used to select the same length names as original ones during obfuscation.
        Example: 'John' --> 'Mike'.
        Default: true

        Parameters
        ----------
        l : bool
          The sameLength used to select the same length names as original ones during obfuscation. Default: true
        """
        return self._set(sameLength=l)

    def setNameEntities(self, n):
        """The nameEntities used to select entities during obfuscation.
        The supported name entities are NAME, PATIENT, and DOCTOR.
        Default: 'NAME'

        Parameters
        ----------
        n : List[str]
        The nameEntities used to select entities during obfuscation. The supported name entities are NAME, PATIENT, and DOCTOR. Default: 'NAME'
        """
        return self._set(nameEntities=n)

    def setGenderAwareness(self, l):
        """Set whether to use gender-aware names or not during obfuscation.
        This param effects only names.
        If value is true, it might decrease performance.
        Default: False

        Parameters
        ----------
        l : str
          Whether to use gender-aware names or not during obfuscation. This param effects only names. If value is true, it might decrease performance. Default: False
        """
        return self._set(genderAwareness=l)

    def __init__(self, classname="com.johnsnowlabs.nlp.annotators.deid.NameChunkObfuscator", java_model=None):
        super(NameChunkObfuscator, self).__init__(
            classname=classname,
            java_model=java_model
        )

