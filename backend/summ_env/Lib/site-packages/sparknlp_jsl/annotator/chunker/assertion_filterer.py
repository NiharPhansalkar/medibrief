from sparknlp_jsl.annotator.filtering_params import FilteringParams
from sparknlp_jsl.common import *

from sparknlp_jsl.utils.licensed_annotator_type import InternalAnnotatorType


class AssertionFilterer(AnnotatorModelInternal, FilteringParams):
    """Filters entities coming from ASSERTION type annotations and returns the CHUNKS.
    Filters can be set via white and black lists on the extracted chunk, the assertion or a regular expression.
    White and black lists for assertion are enabled by default. To use chunk white list, ``criteria`` has to be set to ``isin``.
    For regex, ``criteria`` has to be set to ``regex``.

    ==============================  ======================
    Input Annotation types          Output Annotation type
    ==============================  ======================
    ``DOCUMENT, CHUNK, ASSERTION``  ``CHUNK``
    ==============================  ======================

    Parameters
    ----------

    whiteList: List[str]
        If defined, list of entities to process. The rest will be ignored.
    blackList: List[str]
        If defined, list of entities to ignore. The rest will be processed. Do not include IOB prefix on labels.
    caseSensitive: bool
        Determines whether the definitions of the white listed and black listed entities are case sensitive. Default: False.
    regex: List[str]
        If defined, list of regex to process the chunks.
    criteria: str
        It is used to compare black and white listed values with the result of the Annotation.
        Possible values are the following: 'isin', 'regex' and 'assertion'.
                assertion: Filter by the assertion
                isin : Filter by the chunk
                regex : Filter by using a regex
            Default: assertion

    Examples
    --------


    >>> import sparknlp
    >>> from sparknlp.base import *
    >>> from sparknlp_jsl.common import *
    >>> from sparknlp.annotator import *
    >>> from sparknlp.training import *
    >>> import sparknlp_jsl
    >>> from sparknlp_jsl.base import *
    >>> from sparknlp_jsl.annotator import *
    >>> from pyspark.ml import Pipeline
     To see how the assertions are extracted, see the example for AssertionDLModel.
     Define an extra step where the assertions are filtered
    >>> assertionFilterer = AssertionFilterer() \\
    ...   .setInputCols(["sentence","ner_chunk","assertion"]) \\
    ...    .setOutputCol("filtered") \\
    ...   .setCriteria("assertion") \\
    ...   .setWhiteList(["present"])
    ...
    >>> assertionPipeline = Pipeline(stages=[
    ...   documentAssembler,
    ...   sentenceDetector,
    ...   tokenizer,
    ...   embeddings,
    ...   nerModel,
    ...   nerConverter,
    ...   clinicalAssertion,
    ...   assertionFilterer
    ... ])
    ...
    >>> assertionModel = assertionPipeline.fit(data)
    >>> result = assertionModel.transform(data)


    >>> result.selectExpr("ner_chunk.result", "assertion.result").show(3, truncate=False)
    +--------------------------------+--------------------------------+
    |result                          |result                          |
    +--------------------------------+--------------------------------+
    |[severe fever, sore throat]     |[present, present]              |
    |[stomach pain]                  |[absent]                        |
    |[an epidural, PCA, pain control]|[present, present, hypothetical]|
    +--------------------------------+--------------------------------+

    >>> result.select("filtered.result").show(3, truncate=False)
    +---------------------------+
    |result                     |
    +---------------------------+
    |[severe fever, sore throat]|
    |[]                         |
    |[an epidural, PCA]         |
    +---------------------------+
    """
    inputAnnotatorTypes = [AnnotatorType.DOCUMENT, AnnotatorType.CHUNK, InternalAnnotatorType.ASSERTION]
    outputAnnotatorType = AnnotatorType.CHUNK

    name = "AssertionFilterer"

    def __init__(self, classname="com.johnsnowlabs.nlp.annotators.chunker.AssertionFilterer", java_model=None):
        super(AssertionFilterer, self).__init__(
            classname=classname,
            java_model=java_model
        )

    # it overrides because of different documentation.
    def setCriteria(self, value):
        """It is used to compare black and white listed values with the result of the Annotation.
        Possible values are the following: 'isin', 'regex' and 'assertion'. Default: 'assertion'.
        assertion: Filter by the assertion
        isin : Filter by the chunk
        regex : Filter by using a regex
        Parameters
        ----------
        value : string
            It is used to compare black and white listed values with the result of the Annotation.
            Possible values are the following: 'isin', 'regex' and 'assertion'. Default: 'assertion'.
        """
        return self._set(criteria = value)
