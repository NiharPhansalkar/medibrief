import re

from sparknlp_jsl.common import *


class NerTemplateRenderModel(AnnotatorModelInternal):

    inputAnnotatorTypes = [AnnotatorType.CHUNK]
    outputAnnotatorType = AnnotatorType.DOCUMENT

    templates = Param(Params._dummy(), "templates", "The list of SparkNLP for Healthcare templates", typeConverter = TypeConverters.toListString)

    def setTemplates(self, value):
        """Sets The list of SparkNLP for Healthcare templates

        Parameters
        ----------
        value : liststring
                The list of SparkNLP for Healthcare templates
        """
        value = [re.sub(r"((\{\{) +| +(}}))", r"\2\3", tpl) for tpl in value]
        return self._set(templates = value)

    entityScopes = Param(Params._dummy(), "entityScopes", "The list of scope fields to consider when making entity tuples to render the templates. " +
                         "The scope fields are the metadata keys containing the scope index or name for each chunk. " +
                         "i.e. `sentence`, `paragraph`, `section` ...", typeConverter = TypeConverters.toListString)

    def setEntityScopes(self, value):
        """Sets The list of scope fields to consider when making entity tuples to render the templates. " + "The scope fields are the metadata keys containing the scope index or name for each chunk. " + "i.e. `sentence`, `paragraph`, `section` ...

        Parameters
        ----------
        value : liststring
                The list of scope fields to consider when making entity tuples to render the templates. " + "The scope fields are the metadata keys containing the scope index or name for each chunk. " + "i.e. `sentence`, `paragraph`, `section` ...
        """
        return self._set(entityScopes = value)

    resampleEntities = Param(Params._dummy(), "resampleEntities", "True if you want to resample entities from texts that do not have enough chunks to fill a template", typeConverter = TypeConverters.toBoolean)

    def setResampleEntities(self, value):
        """Sets True if you want to resample entities from texts that do not have enough chunks to fill a template

        Parameters
        ----------
        value : boolean
                True if you want to resample entities from texts that do not have enough chunks to fill a template
        """
        return self._set(resampleEntities = value)

    combineEntities = Param(Params._dummy(), "combineEntities", "True if you want to combine chunks when the text has more than enough to fill the template, generating more outputs", typeConverter = TypeConverters.toBoolean)

    def setCombineEntities(self, value):
        """Sets True if you want to combine chunks when the text has more than enough to fill the template, generating more outputs

        Parameters
        ----------
        value : boolean
                True if you want to combine chunks when the text has more than enough to fill the template, generating more outputs
        """
        return self._set(combineEntities = value)

    permuteEntities = Param(Params._dummy(), "permuteEntities", "True if you want to permute chunks when the text has more than enough to fill the template, generating even more outputs. Overrides `combineEntities`", typeConverter = TypeConverters.toBoolean)

    def setPermuteEntities(self, value):
        """Sets True if you want to permute chunks when the text has more than enough to fill the template, generating even more outputs. Overrides `combineEntities`

        Parameters
        ----------
        value : boolean
                True if you want to permute chunks when the text has more than enough to fill the template, generating even more outputs. Overrides `combineEntities`
        """
        return self._set(permuteEntities = value)

    randomSeed = Param(Params._dummy(), "randomSeed", "Random seed for resampling", typeConverter = TypeConverters.toInt)

    def setRandomSeed(self, value):
        """Sets Random seed for resampling

        Parameters
        ----------
        value : int
                Random seed for resampling
        """
        return self._set(randomSeed = value)

    def __init__(self, classname = "com.johnsnowlabs.nlp.annotators.ner.NerTemplateRenderModel", java_model = None):
        super(NerTemplateRenderModel, self).__init__(classname = classname, java_model = java_model)

    @staticmethod
    def pretrained(name, lang = "en", remote_loc = None):
        from sparknlp_jsl.pretrained import InternalResourceDownloader
        return InternalResourceDownloader.downloadModel(NerTemplateRenderModel, name, lang, remote_loc, j_dwn = 'InternalsPythonResourceDownloader')
