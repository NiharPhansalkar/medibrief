"""
The following script includes functions for processing Markdown files containing both Python and Scala code,
 particularly for SparkNLP transpilation. It enables loading files, extracting Python
 or Scala code, updating files with transpiled Scala code, and processing Python code using a transpiler.
"""

from sparknlp_jsl.transpiler import python_2_scala


# def load_file_as_dict(file_path1, file_path2):
#     """
#     Load two files and concatenate their contents into a dictionary.
#
#     Parameters:
#     - file_path1 (str): The path to the first file.
#     - file_path2 (str): The path to the second file.
#
#     Returns:
#     - dict: A dictionary containing the concatenated content of the two files.
#     """
#     text = ""
#     try:
#         with open(file_path1, "r", encoding="utf-8") as file1, open(file_path2, "r", encoding="utf-8") as file2:
#             for line in file1:
#                 text += line
#             for line in file2:
#                 text += line
#     except FileNotFoundError:
#         print(f"File not found.")
#     except Exception as e:
#         print(f"File reading error: {e}")
#
#     # Parse text into a dictionary using spaces
#     lines = text.strip().split('\n')
#
#     data_dict = {}
#     for line in lines:
#         parts = line.split()
#         if len(parts) >= 2:
#             key = parts[0]
#             value = ' '.join(parts[1:])
#             data_dict[key] = value
#
#     return data_dict

def load_file_as_dict(internal_classes, openSource_classes):
    """
    Load two files and concatenate their contents into a dictionary.

    Parameters:
    - file_path1 (str): The path to the first file.
    - file_path2 (str): The path to the second file.

    Returns:
    - dict: A dictionary containing the concatenated content of the two files.
    """
    text = internal_classes + openSource_classes


    # Parse text into a dictionary using spaces
    lines = text.strip().split('\n')

    data_dict = {}
    for line in lines:
        parts = line.split()
        if len(parts) >= 2:
            key = parts[0]
            value = ' '.join(parts[1:])
            data_dict[key] = value

    return data_dict


def process_python_code(python_code):
    """
    Process Python code using the transpiler.

    Parameters:
    - python_code (str): The Python code to be processed.

    Returns:
    - str: The processed Scala code.
    """
    processed_code = python_2_scala.run_transpiler(python_code)
    return processed_code


def update_md_file(file_path):
    """
    Update a Markdown file by transpiling Python code to Scala code.

    Parameters:
    - file_path (str): The path to the Markdown file.

    Returns:
    - None: [Specify the return type and description]
    """
    with open(file_path, 'r', encoding='utf-8') as file:
        md_content = file.read()

        # Use start and end markers to find Python code in the Markdown file.
        python_start_marker = "```python"
        python_end_marker = "```"
        scala_start_marker = "```scala"
        scala_end_marker = "```"

        # Find start and end markers and extract Python code.
        python_start_index = md_content.find(python_start_marker)
        python_end_index = md_content.find(python_end_marker, python_start_index + len(python_start_marker))
        line = "\n"

        # Get Python code
        if python_start_index != -1 and python_end_index != -1:
            python_code = md_content[python_start_index + len(python_start_marker):python_end_index].strip()

            # Process Python code
            processed_python_code = process_python_code(python_code)

            # Clear the region in the Scala code
            scala_start_index = md_content.find(scala_start_marker, python_end_index)
            scala_end_index = md_content.find(scala_end_marker, scala_start_index + len(scala_start_marker))

            if scala_start_index != -1 and scala_end_index != -1:
                scala_code_before = md_content[:scala_start_index].strip()
                scala_code_after = md_content[scala_end_index + len(scala_end_marker):].strip()

                # Updated file content
                updated_md_content = f"{scala_code_before}\n\n{scala_start_marker}\n\n{processed_python_code}\n{line}\n{scala_end_marker}\n\n{scala_code_after}\n\n"

                # Update the file
                with open(file_path, 'w', encoding='utf-8') as updated_file:
                    updated_file.write(updated_md_content)

                print(f"File is updated.: {file_path}")
                print(f"\n----------------------------------------------------------------- {updated_md_content} \n"
                      f"-----------------------------------------------------------------")
            else:
                print("Error: Could not find appropriate markers in the Scala code.")
                python_side = md_content[:python_end_index]
                after_scala = md_content.find("</div>")
                after_scala_code = md_content[after_scala:]
                updated_md_content = f"{python_side}\n{python_end_marker}\n{scala_start_marker}\n\n{processed_python_code}\n\n{scala_end_marker}\n\n{after_scala_code}\n\n"

                with open(file_path, 'w', encoding='utf-8') as updated_file:
                    updated_file.write(updated_md_content)

                print(f"File is updated: {file_path}")

        else:
            print("Error: Could not find appropriate markers in the Python code.")


def get_scala_code_from_md(md_file_path):
    """
    Extract Scala code from a Markdown file.

    Parameters:
    - md_file_path (str): The path to the Markdown file.

    Returns:
    - str: The extracted Scala code.
    """
    with open(md_file_path, 'r', encoding='utf-8') as file:
        file_content = file.read()

        scala_start_marker = "```scala"
        scala_end_marker = "```"

        start_index = file_content.find(scala_start_marker)
        end_index = file_content.find(scala_end_marker, start_index + len(scala_start_marker))

        if start_index != -1 and end_index != -1:
            scala_code = file_content[start_index + len(scala_start_marker):end_index].strip()
            return scala_code
        else:
            print("Error: Could not find appropriate markers in the Scala code.")
            return "1"


def get_python_code_from_md(md_file_path):
    """
    Extract Python code from a Markdown file.

    Parameters:
    - md_file_path (str): The path to the Markdown file.

    Returns:
    - str or None: The extracted Python code or None if not found.
    """
    with open(md_file_path, 'r', encoding='utf-8') as file:
        md_content = file.read()

        # Use start and end markers to find Python code in the Markdown file.
        start_marker = "```python"
        end_marker = "```"

        # Find start and end markers
        start_index = md_content.find(start_marker)
        end_index = md_content.find(end_marker, start_index + len(start_marker))

        # Get Python code
        if start_index != -1 and end_index != -1:
            python_code = md_content[start_index + len(start_marker):end_index].strip()
            return python_code
        else:
            return None


def update_md_file_for_working_scala_code(md_file_path, replacement_string):
    """
    Update a Markdown file by replacing the Scala code.

    Parameters:
    - md_file_path (str): The path to the Markdown file.
    - replacement_string (str): The new Scala code to replace the existing one.

    Returns:
    - str or None: The old Scala code or None if not found.
    """
    with open(md_file_path, 'r', encoding='utf-8') as file:
        file_content = file.read()

        scala_start_marker = "```scala"
        scala_end_marker = "```"

        start_index = file_content.find(scala_start_marker)
        end_index = file_content.find(scala_end_marker, start_index + len(scala_start_marker))

        if start_index != -1 and end_index != -1:
            # Extract the content between markers
            old_content = file_content[start_index + len(scala_start_marker):end_index].strip()

            # Replace the content with the new string
            new_content = file_content[
                          :start_index + len(scala_start_marker)] + "\n" + replacement_string + "\n" + file_content[
                                                                                                       end_index:]

            # Write the updated content back to the file
            with open(md_file_path, 'w', encoding='utf-8') as new_file:
                new_file.write(new_content)

            return old_content
        else:
            print("Error: Could not find appropriate markers in the Scala code.")
            return None
